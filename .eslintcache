[{"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js":"1","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js":"2","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js":"4","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js":"6","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"7","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js":"8","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"9","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js":"10","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js":"11","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js":"12","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js":"13","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js":"14","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js":"16","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"17","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js":"18","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js":"20","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js":"21","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"22","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"23","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js":"24","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js":"25"},{"size":1402,"mtime":1611713966452,"results":"26","hashOfConfig":"27"},{"size":4485,"mtime":1611703042216,"results":"28","hashOfConfig":"27"},{"size":2831,"mtime":1611535380894,"results":"29","hashOfConfig":"27"},{"size":1133,"mtime":1611441537450,"results":"30","hashOfConfig":"27"},{"size":426,"mtime":1611714939558,"results":"31","hashOfConfig":"27"},{"size":1766,"mtime":1611607217713,"results":"32","hashOfConfig":"27"},{"size":1682,"mtime":1611189061225,"results":"33","hashOfConfig":"27"},{"size":3994,"mtime":1611189061225,"results":"34","hashOfConfig":"27"},{"size":1370,"mtime":1611607754970,"results":"35","hashOfConfig":"27"},{"size":888,"mtime":1610578751202,"results":"36","hashOfConfig":"27"},{"size":1148,"mtime":1611679263032,"results":"37","hashOfConfig":"27"},{"size":200,"mtime":1611535380892,"results":"38","hashOfConfig":"27"},{"size":362,"mtime":1610231744011,"results":"39","hashOfConfig":"27"},{"size":547,"mtime":1611535380892,"results":"40","hashOfConfig":"27"},{"size":435,"mtime":1611680976650,"results":"41","hashOfConfig":"27"},{"size":166,"mtime":1611270122438,"results":"42","hashOfConfig":"27"},{"size":179,"mtime":1611328284547,"results":"43","hashOfConfig":"27"},{"size":4229,"mtime":1611541692849,"results":"44","hashOfConfig":"27"},{"size":2508,"mtime":1611338668005,"results":"45","hashOfConfig":"27"},{"size":3504,"mtime":1611715696574,"results":"46","hashOfConfig":"27"},{"size":1659,"mtime":1611535380892,"results":"47","hashOfConfig":"27"},{"size":3387,"mtime":1611608136541,"results":"48","hashOfConfig":"27"},{"size":1028,"mtime":1611532790186,"results":"49","hashOfConfig":"27"},{"size":9086,"mtime":1611607951246,"results":"50","hashOfConfig":"27"},{"size":1235,"mtime":1611507601438,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h0gt8",{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js",["110","111","112"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js",[],["113","114"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js",["115","116","117"],"\n\nexport function computeAverage(player, gamesParameter = player.player_games.length) {\n  let playerGames = player.player_games\n  let gP = gamesParameter\n\n  let playerAverages = {\n    name: player.name,\n    nba_team_id: player.nba_team_id,\n    position: player.position,\n    avg_mins: avgCaddy(playerGames, \"mins\", gP),\n    avg_fgm: avgCaddy(playerGames, \"fgm\", gP),\n    avg_fga: avgCaddy(playerGames, \"fga\", gP),\n    fgp: avgCaddy(playerGames, \"fgp\", gP),\n    avg_ftm: avgCaddy(playerGames, \"ftm\", gP),\n    avg_fta: avgCaddy(playerGames, \"fta\", gP),\n    ftp: avgCaddy(playerGames, \"ftp\", gP),\n    avg_tpm: avgCaddy(playerGames, \"tpm\", gP),\n    avg_tpa: avgCaddy(playerGames, \"tpa\", gP),\n    tpp: avgCaddy(playerGames, \"tpp\", gP),\n    avg_off_reb: avgCaddy(playerGames, \"off_reb\", gP),\n    avg_def_reb: avgCaddy(playerGames, \"def_reb\", gP),\n    avg_tot_reb: avgCaddy(playerGames, \"tot_reb\", gP),\n    avg_assists: avgCaddy(playerGames, \"assists\", gP),\n    avg_steals: avgCaddy(playerGames, \"steals\", gP),\n    avg_blocks: avgCaddy(playerGames, \"blocks\", gP),\n    avg_turnovers: avgCaddy(playerGames, \"turnovers\", gP),\n    avg_plus_minus: avgCaddy(playerGames, \"plus_minus\", gP),\n    avg_p_fouls: avgCaddy(playerGames, \"p_fouls\", gP),\n    avg_points: avgCaddy(playerGames, \"points\", gP),\n    games_played: gamesPlayed(playerGames)\n  }\n  return playerAverages\n}\n\nfunction avgCaddy(playerGames, stat, gP) {\n  switch (stat) {\n    case \"fgp\" || \"ftp\" || \"tpp\":\n      if (playerGames.length > 0) {\n        let madeArray = []\n        let attemptsArray = []\n        let cat = stat.slice(0, 2)\n\n        for (const game in playerGames) {\n          if (parseInt(playerGames[game].mins) > 0) {\n            madeArray.push(parseFloat(playerGames[game][`${cat}m`]))\n            attemptsArray.push(parseFloat(playerGames[game][`${cat}a`]))\n          }\n        }\n\n        // adjust array conditionals to safeguard against User attempting to view more games\n        // than the player has played; no negative slice\n        let adjustMadeArray = []\n        {\n          madeArray.length - gP >= 0\n            ? adjustMadeArray = [...madeArray.slice(madeArray.length - gP)]\n            : adjustMadeArray = [...madeArray]\n        }\n\n        let adjustAttemptsArray = []\n        {\n          attemptsArray.length - gP >= 0\n            ? adjustAttemptsArray = attemptsArray.slice(attemptsArray.length - gP)\n            : adjustAttemptsArray = [...attemptsArray]\n        }\n\n        // conditionals guard against dividing by zero\n        let avgMade = 0.0\n        if (adjustMadeArray.length > 0){\n           avgMade = adjustMadeArray.reduce((tot, val) => tot + val) / adjustMadeArray.length\n        }\n\n        let avgAttempts = 0.0\n        if (adjustAttemptsArray.length > 0){\n           avgAttempts = adjustAttemptsArray.reduce((tot, val) => tot + val) / adjustAttemptsArray.length\n        }\n\n        if (avgAttempts > 0){\n          return parseFloat((avgMade * 100 / avgAttempts).toFixed(1))\n        } else {\n          return 0.0\n        }\n      } else {\n        return 0.0\n      }\n    default:\n      if (playerGames.length > 0) {\n        let sumArray = []\n        for (const game in playerGames) {\n          if(parseInt(playerGames[game].mins) > 0) {\n            sumArray.push(parseFloat(playerGames[game][stat]))\n          }\n        }\n        let adjustArray = []\n        {\n          sumArray.length - gP >= 0\n            ? adjustArray = [...sumArray.slice(sumArray.length - gP)]\n            : adjustArray = [...sumArray]\n        }\n        let average = 0.0 \n        if (adjustArray.length > 0){\n          average = parseFloat((adjustArray.reduce((tot, val) => tot + val) / gP).toFixed(1))\n        } else {\n          average = 0.0\n        }\n        return average\n      } else {\n        return 0.0\n      }\n  }\n}\n\nfunction gamesPlayed(playerGames){\n  let gamesPlayed = []\n  for (const game in playerGames) {\n    if(parseInt(playerGames[game].mins) > 0) {\n      gamesPlayed.push(1)\n    }\n  }\n  return gamesPlayed.length\n}",["118","119"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",["120","121"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js",[],["122","123"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js",[],["124","125"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js",[],["126","127"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],["128","129"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js",["130"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js",["131","132"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js",["133","134"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["135","136"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js",["137"],"import React, { useEffect, useState } from 'react'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { useSelector } from 'react-redux'\n\nfunction TradeResultChart() {\n\n  const tradeScore = useSelector((state) => state.tradeScore)\n  const categories = useSelector((state) => state.categories)\n\n  const [yourPlayers, setYourPlayers] = useState()\n  const [theirPlayers, setTheirPlayers] = useState()\n  const [finalScore, setFinalScore] = useState(null)\n  \n\n  useEffect(() => {\n    if (tradeScore) {\n      setYourPlayers(tradeScoreToDataTable(tradeScore[0]))\n      setTheirPlayers(tradeScoreToDataTable(tradeScore[1]))\n      // setFinalScore(finalScoreFunction(yourPlayers,theirPlayers))\n    }\n  }, [tradeScore])\n\n  useEffect(() => {\n    \n  }, [categories])\n\n  useEffect(() => {\n    if (yourPlayers && theirPlayers) {\n      console.log(\"in useEffect to set final Score\", finalScore)\n\n      let localFS = [finalScoreFunction(yourPlayers, theirPlayers)]\n      console.log(\"localFS: \", localFS)\n\n      setFinalScore(localFS)\n      console.log(\"final score; \", finalScore)\n    }\n  }, [yourPlayers])\n\n\n  return (\n    <>\n      {finalScore\n        ? <>\n          <h4>Your Players</h4>\n          <DataTable value={yourPlayers} className=\"p-datatable-striped\">\n            <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n            {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n            {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n          </DataTable>\n          <h4>Their Players</h4>\n          <DataTable value={theirPlayers} className=\"p-datatable-striped\">\n            <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n            {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n            {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n            {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n          </DataTable>\n\n          <div>\n            <h4>Difference</h4>\n            <DataTable value={finalScore} className=\"p-datatable-striped\">\n              <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n              <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n              {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n              {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n              <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n              {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n              <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n              <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n              <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n              <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n              <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n              <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n              {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n              <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n              <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n              {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n              <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n            </DataTable>\n          </div>\n        </>\n        : null}\n    </>\n  )\n}\n\nfunction tradeScoreToDataTable(tradeScore) {\n  let adjustedForTable = []\n\n  let totalsRow = tradeScore[1]\n  totalsRow.name = \"TOTALS\"\n\n  adjustedForTable = [...tradeScore[0], totalsRow]\n  return adjustedForTable\n}\n\nfunction finalScoreFunction(yourPlayers, theirPlayers) {\n  let fs = {}\n  const holdYourPlayers = [...yourPlayers]\n  let categories = holdYourPlayers.pop()\n  const holdTheirPlayers = [...theirPlayers]\n  const theirStats = holdTheirPlayers.pop()\n\n  for (const category in categories) {\n    if (category !== \"name\") {\n      // console.log(category, categories, theirStats)\n      if (categories[category] > theirStats[category]) {\n        fs[category] = -parseFloat((categories[category] - theirStats[category]).toFixed(2))\n      } else if (categories[category] < theirStats[category]) {\n        fs[category] = parseFloat(Math.abs(categories[category] - theirStats[category]).toFixed(2))\n      } else {\n        fs[category] = 0.0\n      }\n    }\n  }\n  fs.name = \"FINAL SCORE\"\n  return fs\n}\n\nexport default TradeResultChart","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js",[],{"ruleId":"138","severity":1,"message":"139","line":23,"column":13,"nodeType":"140","messageId":"141","endLine":23,"endColumn":33},{"ruleId":"142","severity":1,"message":"143","line":28,"column":6,"nodeType":"144","endLine":28,"endColumn":18,"suggestions":"145"},{"ruleId":"138","severity":1,"message":"146","line":81,"column":7,"nodeType":"140","messageId":"141","endLine":81,"endColumn":20},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":54,"column":9,"nodeType":"153","messageId":"154","endLine":58,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":61,"column":9,"nodeType":"153","messageId":"154","endLine":65,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":95,"column":9,"nodeType":"153","messageId":"154","endLine":99,"endColumn":10},{"ruleId":"147","replacedBy":"155"},{"ruleId":"149","replacedBy":"156"},{"ruleId":"138","severity":1,"message":"157","line":5,"column":21,"nodeType":"140","messageId":"141","endLine":5,"endColumn":29},{"ruleId":"142","severity":1,"message":"158","line":18,"column":6,"nodeType":"144","endLine":18,"endColumn":34,"suggestions":"159"},{"ruleId":"147","replacedBy":"160"},{"ruleId":"149","replacedBy":"161"},{"ruleId":"147","replacedBy":"162"},{"ruleId":"149","replacedBy":"163"},{"ruleId":"147","replacedBy":"164"},{"ruleId":"149","replacedBy":"165"},{"ruleId":"147","replacedBy":"166"},{"ruleId":"149","replacedBy":"167"},{"ruleId":"138","severity":1,"message":"168","line":1,"column":27,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"169","severity":2,"message":"170","line":41,"column":3,"nodeType":"171","messageId":"172","endLine":41,"endColumn":22},{"ruleId":"173","severity":2,"message":"174","line":41,"column":3,"nodeType":"140","messageId":"175","endLine":41,"endColumn":22},{"ruleId":"138","severity":1,"message":"176","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":16},{"ruleId":"142","severity":1,"message":"158","line":33,"column":6,"nodeType":"144","endLine":33,"endColumn":21,"suggestions":"177"},{"ruleId":"142","severity":1,"message":"178","line":18,"column":6,"nodeType":"144","endLine":18,"endColumn":21,"suggestions":"179"},{"ruleId":"142","severity":1,"message":"180","line":22,"column":6,"nodeType":"144","endLine":22,"endColumn":8,"suggestions":"181"},{"ruleId":"142","severity":1,"message":"182","line":38,"column":6,"nodeType":"144","endLine":38,"endColumn":19,"suggestions":"183"},"no-unused-vars","'sortedCombinedValues' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.","ArrayExpression",["184"],"'ColoredColumn' is assigned a value but never used.","no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["185"],["186"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["187"],["185"],["186"],["185"],["186"],["185"],["186"],["185"],["186"],"'useEffect' is defined but never used.","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-undef","'dispatchSetCategory' is not defined.","undef","'Button' is defined but never used.",["188"],"React Hook useEffect has a missing dependency: 'allPlayers'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has missing dependencies: 'allPlayers' and 'fantasyValues'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'finalScore' and 'theirPlayers'. Either include them or remove the dependency array.",["191"],{"desc":"192","fix":"193"},"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"198","fix":"200"},{"desc":"201","fix":"202"},"Update the dependencies array to be: [categories, playerAverages]",{"range":"203","text":"204"},"Update the dependencies array to be: [playerAverages, categories, props]",{"range":"205","text":"206"},"Update the dependencies array to be: [categoriesObj, props]",{"range":"207","text":"208"},"Update the dependencies array to be: [allPlayers, fantasyValues]",{"range":"209","text":"210"},{"range":"211","text":"210"},"Update the dependencies array to be: [finalScore, theirPlayers, yourPlayers]",{"range":"212","text":"213"},[1049,1061],"[categories, playerAverages]",[774,802],"[playerAverages, categories, props]",[1015,1030],"[categoriesObj, props]",[800,815],"[allPlayers, fantasyValues]",[907,909],[1127,1140],"[finalScore, theirPlayers, yourPlayers]"]