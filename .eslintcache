[{"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js":"1","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js":"2","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js":"4","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js":"6","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"7","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js":"8","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"9","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js":"10","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js":"11","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js":"12","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js":"13","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js":"14","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js":"16","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"17","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js":"18","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js":"20","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js":"21","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"22","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"23","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js":"24","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js":"25"},{"size":1043,"mtime":1611270122437,"results":"26","hashOfConfig":"27"},{"size":4399,"mtime":1611537568632,"results":"28","hashOfConfig":"27"},{"size":2831,"mtime":1611511020902,"results":"29","hashOfConfig":"27"},{"size":1133,"mtime":1611441537450,"results":"30","hashOfConfig":"27"},{"size":473,"mtime":1611510119688,"results":"31","hashOfConfig":"27"},{"size":1766,"mtime":1611535380889,"results":"32","hashOfConfig":"27"},{"size":1682,"mtime":1611189061225,"results":"33","hashOfConfig":"27"},{"size":3994,"mtime":1611189061225,"results":"34","hashOfConfig":"27"},{"size":1311,"mtime":1611513669659,"results":"35","hashOfConfig":"27"},{"size":888,"mtime":1610578751202,"results":"36","hashOfConfig":"27"},{"size":1098,"mtime":1611441537450,"results":"37","hashOfConfig":"27"},{"size":200,"mtime":1611535380892,"results":"38","hashOfConfig":"27"},{"size":362,"mtime":1610231744011,"results":"39","hashOfConfig":"27"},{"size":547,"mtime":1611535380892,"results":"40","hashOfConfig":"27"},{"size":292,"mtime":1611270122440,"results":"41","hashOfConfig":"27"},{"size":166,"mtime":1611270122438,"results":"42","hashOfConfig":"27"},{"size":179,"mtime":1611328284547,"results":"43","hashOfConfig":"27"},{"size":4229,"mtime":1611541692849,"results":"44","hashOfConfig":"27"},{"size":2508,"mtime":1611338668005,"results":"45","hashOfConfig":"27"},{"size":2987,"mtime":1611508854779,"results":"46","hashOfConfig":"27"},{"size":1659,"mtime":1611526952690,"results":"47","hashOfConfig":"27"},{"size":3390,"mtime":1611527446418,"results":"48","hashOfConfig":"27"},{"size":1028,"mtime":1611532790186,"results":"49","hashOfConfig":"27"},{"size":8682,"mtime":1611534960351,"results":"50","hashOfConfig":"27"},{"size":1235,"mtime":1611507601438,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h0gt8",{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js",["109"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js",[],["110","111"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js",["112","113","114"],"\n\nexport function computeAverage(player, gamesParameter = player.player_games.length) {\n  let playerGames = player.player_games\n  let gP = gamesParameter\n\n  let playerAverages = {\n    name: player.name,\n    nba_team_id: player.nba_team_id,\n    position: player.position,\n    avg_mins: avgCaddy(playerGames, \"mins\", gP),\n    avg_fgm: avgCaddy(playerGames, \"fgm\", gP),\n    avg_fga: avgCaddy(playerGames, \"fga\", gP),\n    fgp: avgCaddy(playerGames, \"fgp\", gP),\n    avg_ftm: avgCaddy(playerGames, \"ftm\", gP),\n    avg_fta: avgCaddy(playerGames, \"fta\", gP),\n    ftp: avgCaddy(playerGames, \"ftp\", gP),\n    avg_tpm: avgCaddy(playerGames, \"tpm\", gP),\n    avg_tpa: avgCaddy(playerGames, \"tpa\", gP),\n    tpp: avgCaddy(playerGames, \"tpp\", gP),\n    avg_off_reb: avgCaddy(playerGames, \"off_reb\", gP),\n    avg_def_reb: avgCaddy(playerGames, \"def_reb\", gP),\n    avg_tot_reb: avgCaddy(playerGames, \"tot_reb\", gP),\n    avg_assists: avgCaddy(playerGames, \"assists\", gP),\n    avg_steals: avgCaddy(playerGames, \"steals\", gP),\n    avg_blocks: avgCaddy(playerGames, \"blocks\", gP),\n    avg_turnovers: avgCaddy(playerGames, \"turnovers\", gP),\n    avg_plus_minus: avgCaddy(playerGames, \"plus_minus\", gP),\n    avg_p_fouls: avgCaddy(playerGames, \"p_fouls\", gP),\n    avg_points: avgCaddy(playerGames, \"points\", gP),\n    games_played: gamesPlayed(playerGames)\n  }\n  return playerAverages\n}\n\nfunction avgCaddy(playerGames, stat, gP) {\n  switch (stat) {\n    case \"fgp\" || \"ftp\" || \"tpp\":\n      if (playerGames.length > 0) {\n        let madeArray = []\n        let attemptsArray = []\n        let cat = stat.slice(0, 2)\n\n        for (const game in playerGames) {\n          if (parseInt(playerGames[game].mins) > 0) {\n            madeArray.push(parseFloat(playerGames[game][`${cat}m`]))\n            attemptsArray.push(parseFloat(playerGames[game][`${cat}a`]))\n          }\n        }\n\n        // adjust array conditionals to safeguard against User attempting to view more games\n        // than the player has played; no negative slice\n        let adjustMadeArray = []\n        {\n          madeArray.length - gP >= 0\n            ? adjustMadeArray = [...madeArray.slice(madeArray.length - gP)]\n            : adjustMadeArray = [...madeArray]\n        }\n\n        let adjustAttemptsArray = []\n        {\n          attemptsArray.length - gP >= 0\n            ? adjustAttemptsArray = attemptsArray.slice(attemptsArray.length - gP)\n            : adjustAttemptsArray = [...attemptsArray]\n        }\n\n        // conditionals guard against dividing by zero\n        let avgMade = 0.0\n        if (adjustMadeArray.length > 0){\n           avgMade = adjustMadeArray.reduce((tot, val) => tot + val) / adjustMadeArray.length\n        }\n\n        let avgAttempts = 0.0\n        if (adjustAttemptsArray.length > 0){\n           avgAttempts = adjustAttemptsArray.reduce((tot, val) => tot + val) / adjustAttemptsArray.length\n        }\n\n        if (avgAttempts > 0){\n          return parseFloat((avgMade * 100 / avgAttempts).toFixed(1))\n        } else {\n          return 0.0\n        }\n      } else {\n        return 0.0\n      }\n    default:\n      if (playerGames.length > 0) {\n        let sumArray = []\n        for (const game in playerGames) {\n          if(parseInt(playerGames[game].mins) > 0) {\n            sumArray.push(parseFloat(playerGames[game][stat]))\n          }\n        }\n        let adjustArray = []\n        {\n          sumArray.length - gP >= 0\n            ? adjustArray = [...sumArray.slice(sumArray.length - gP)]\n            : adjustArray = [...sumArray]\n        }\n        let average = 0.0 \n        if (adjustArray.length > 0){\n          average = parseFloat((adjustArray.reduce((tot, val) => tot + val) / gP).toFixed(1))\n        } else {\n          average = 0.0\n        }\n        return average\n      } else {\n        return 0.0\n      }\n  }\n}\n\nfunction gamesPlayed(playerGames){\n  let gamesPlayed = []\n  for (const game in playerGames) {\n    if(parseInt(playerGames[game].mins) > 0) {\n      gamesPlayed.push(1)\n    }\n  }\n  return gamesPlayed.length\n}",["115","116"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",["117","118"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js",[],["119","120"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js",[],["121","122"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js",["123"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js",[],["124","125"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],["126","127"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js",["128"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js",["129","130"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["131","132","133"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js",["134"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js",[],{"ruleId":"135","severity":1,"message":"136","line":24,"column":6,"nodeType":"137","endLine":24,"endColumn":18,"suggestions":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":54,"column":9,"nodeType":"145","messageId":"146","endLine":58,"endColumn":10},{"ruleId":"143","severity":1,"message":"144","line":61,"column":9,"nodeType":"145","messageId":"146","endLine":65,"endColumn":10},{"ruleId":"143","severity":1,"message":"144","line":95,"column":9,"nodeType":"145","messageId":"146","endLine":99,"endColumn":10},{"ruleId":"139","replacedBy":"147"},{"ruleId":"141","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":5,"column":21,"nodeType":"151","messageId":"152","endLine":5,"endColumn":29},{"ruleId":"135","severity":1,"message":"153","line":18,"column":6,"nodeType":"137","endLine":18,"endColumn":34,"suggestions":"154"},{"ruleId":"139","replacedBy":"155"},{"ruleId":"141","replacedBy":"156"},{"ruleId":"139","replacedBy":"157"},{"ruleId":"141","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":4,"column":7,"nodeType":"161","endLine":4,"endColumn":186},{"ruleId":"139","replacedBy":"162"},{"ruleId":"141","replacedBy":"163"},{"ruleId":"139","replacedBy":"164"},{"ruleId":"141","replacedBy":"165"},{"ruleId":"149","severity":1,"message":"166","line":1,"column":27,"nodeType":"151","messageId":"152","endLine":1,"endColumn":36},{"ruleId":"167","severity":2,"message":"168","line":41,"column":3,"nodeType":"169","messageId":"170","endLine":41,"endColumn":22},{"ruleId":"171","severity":2,"message":"172","line":41,"column":3,"nodeType":"151","messageId":"173","endLine":41,"endColumn":22},{"ruleId":"149","severity":1,"message":"174","line":6,"column":10,"nodeType":"151","messageId":"152","endLine":6,"endColumn":29},{"ruleId":"135","severity":1,"message":"175","line":19,"column":6,"nodeType":"137","endLine":19,"endColumn":21,"suggestions":"176"},{"ruleId":"135","severity":1,"message":"177","line":23,"column":6,"nodeType":"137","endLine":23,"endColumn":8,"suggestions":"178"},{"ruleId":"135","severity":1,"message":"179","line":32,"column":6,"nodeType":"137","endLine":32,"endColumn":19,"suggestions":"180"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.","ArrayExpression",["181"],"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["182"],["183"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["184"],["182"],["183"],["182"],["183"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["182"],["183"],["182"],["183"],"'useEffect' is defined but never used.","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-undef","'dispatchSetCategory' is not defined.","undef","'computeFantasyValue' is defined but never used.","React Hook useEffect has a missing dependency: 'allPlayers'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'allPlayers' and 'fantasyValues'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'finalScore' and 'theirPlayers'. Either include them or remove the dependency array.",["187"],{"desc":"188","fix":"189"},"no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [categories, playerAverages]",{"range":"197","text":"198"},"Update the dependencies array to be: [playerAverages, categories, props]",{"range":"199","text":"200"},"Update the dependencies array to be: [allPlayers, fantasyValues]",{"range":"201","text":"202"},{"range":"203","text":"202"},"Update the dependencies array to be: [finalScore, theirPlayers, yourPlayers]",{"range":"204","text":"205"},[935,947],"[categories, playerAverages]",[773,801],"[playerAverages, categories, props]",[798,813],"[allPlayers, fantasyValues]",[905,907],[1017,1030],"[finalScore, theirPlayers, yourPlayers]"]