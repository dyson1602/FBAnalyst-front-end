[{"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js":"1","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js":"2","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js":"4","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js":"6","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"7","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js":"8","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"9","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js":"10","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js":"11","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js":"12","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js":"13","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js":"14","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js":"16","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"17","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js":"18","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js":"20","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js":"21","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"22","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"23","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js":"24"},{"size":1043,"mtime":1611270122437,"results":"25","hashOfConfig":"26"},{"size":4158,"mtime":1611507851773,"results":"27","hashOfConfig":"26"},{"size":2891,"mtime":1611437395812,"results":"28","hashOfConfig":"26"},{"size":1133,"mtime":1611433796933,"results":"29","hashOfConfig":"26"},{"size":474,"mtime":1611440821948,"results":"30","hashOfConfig":"26"},{"size":1766,"mtime":1611270122439,"results":"31","hashOfConfig":"26"},{"size":1682,"mtime":1611189061225,"results":"32","hashOfConfig":"26"},{"size":3994,"mtime":1611189061225,"results":"33","hashOfConfig":"26"},{"size":591,"mtime":1611507975667,"results":"34","hashOfConfig":"26"},{"size":888,"mtime":1610578751202,"results":"35","hashOfConfig":"26"},{"size":1098,"mtime":1611441537450,"results":"36","hashOfConfig":"26"},{"size":159,"mtime":1611338805656,"results":"37","hashOfConfig":"26"},{"size":362,"mtime":1610231744011,"results":"38","hashOfConfig":"26"},{"size":444,"mtime":1611441537453,"results":"39","hashOfConfig":"26"},{"size":292,"mtime":1611265028704,"results":"40","hashOfConfig":"26"},{"size":166,"mtime":1611270122438,"results":"41","hashOfConfig":"26"},{"size":179,"mtime":1611328284547,"results":"42","hashOfConfig":"26"},{"size":1449,"mtime":1611350708032,"results":"43","hashOfConfig":"26"},{"size":2508,"mtime":1611338668005,"results":"44","hashOfConfig":"26"},{"size":2990,"mtime":1611440913427,"results":"45","hashOfConfig":"26"},{"size":1195,"mtime":1611344440362,"results":"46","hashOfConfig":"26"},{"size":3231,"mtime":1611507690285,"results":"47","hashOfConfig":"26"},{"size":743,"mtime":1611507213935,"results":"48","hashOfConfig":"26"},{"size":160,"mtime":1611438970445,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h0gt8",{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js",["106"],"import React, { useState, useEffect } from 'react'\nimport { connect, useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Button } from 'primereact/button'\nimport { combineValues } from '../StatFunctions/combineValues'\n\nfunction PlayerRankerChart() {\n\n  const categories = useSelector((state) => state.categories)\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [combinedValues, setCombinedValues] = useState()\n\n  useEffect(() => {\n    if(categories){\n      const fantasyValues = computeFantasyValue(playerAverages, categories)\n      const combinedValues = combineValues(playerAverages, fantasyValues)\n      setCombinedValues(combinedValues)\n    }\n  },[categories])\n\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\n\n  return (\n    <>\n      <div>\n        <div className=\"card\">\n          <DataTable value={combinedValues} className=\"p-datatable-striped\" paginator\n            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={25} rowsPerPageOptions={[10, 20, 50]}\n            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" sortable></Column>\n            <Column className=\"table-props\" field=\"name\" header=\"Name\" sortable></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" sortable></Column>\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" sortable></Column>\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" sortable></Column>\n          </DataTable>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues) => dispatch(setFantasyValues(fantasyValues))\n  }\n}\n\n// export default connect(msp, mdp)(PlayerRankerChart)\nexport default connect(null, mdp)(PlayerRankerChart)","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js",["107","108","109"],"\n\nexport function computeAverage(player, gamesParameter = player.player_games.length) {\n  let playerGames = player.player_games\n  let gP = gamesParameter\n\n  let playerAverages = {\n    name: player.name,\n    nba_team_id: player.nba_team_id,\n    position: player.position,\n    avg_mins: avgCaddy(playerGames, \"mins\", gP),\n    avg_fgm: avgCaddy(playerGames, \"fgm\", gP),\n    avg_fga: avgCaddy(playerGames, \"fga\", gP),\n    fgp: avgCaddy(playerGames, \"fgp\", gP),\n    avg_ftm: avgCaddy(playerGames, \"ftm\", gP),\n    avg_fta: avgCaddy(playerGames, \"fta\", gP),\n    ftp: avgCaddy(playerGames, \"ftp\", gP),\n    avg_tpm: avgCaddy(playerGames, \"tpm\", gP),\n    avg_tpa: avgCaddy(playerGames, \"tpa\", gP),\n    tpp: avgCaddy(playerGames, \"tpp\", gP),\n    avg_off_reb: avgCaddy(playerGames, \"off_reb\", gP),\n    avg_def_reb: avgCaddy(playerGames, \"def_reb\", gP),\n    avg_tot_reb: avgCaddy(playerGames, \"tot_reb\", gP),\n    avg_assists: avgCaddy(playerGames, \"assists\", gP),\n    avg_steals: avgCaddy(playerGames, \"steals\", gP),\n    avg_blocks: avgCaddy(playerGames, \"blocks\", gP),\n    avg_turnovers: avgCaddy(playerGames, \"turnovers\", gP),\n    avg_plus_minus: avgCaddy(playerGames, \"plus_minus\", gP),\n    avg_p_fouls: avgCaddy(playerGames, \"p_fouls\", gP),\n    avg_points: avgCaddy(playerGames, \"points\", gP),\n    games_played: gamesPlayed(playerGames)\n  }\n  return playerAverages\n}\n\nfunction avgCaddy(playerGames, stat, gP) {\n  switch (stat) {\n    case \"fgp\" || \"ftp\" || \"tpp\":\n      if (playerGames.length > 0) {\n        let madeArray = []\n        let attemptsArray = []\n        let cat = stat.slice(0, 2)\n\n        for (const game in playerGames) {\n          if (parseInt(playerGames[game].mins) > 0) {\n            madeArray.push(parseFloat(playerGames[game][`${cat}m`]))\n            attemptsArray.push(parseFloat(playerGames[game][`${cat}a`]))\n          }\n        }\n\n        // adjust array conditionals to safeguard against User attempting to view more games\n        // than the player has played; no negative slice\n        let adjustMadeArray = []\n        {\n          madeArray.length - gP >= 0\n            ? adjustMadeArray = [...madeArray.slice(madeArray.length - gP)]\n            : adjustMadeArray = [...madeArray]\n        }\n\n        let adjustAttemptsArray = []\n        {\n          attemptsArray.length - gP >= 0\n            ? adjustAttemptsArray = attemptsArray.slice(attemptsArray.length - gP)\n            : adjustAttemptsArray = [...attemptsArray]\n        }\n\n        // conditionals guard against dividing by zero\n        let avgMade = 0.0\n        if (adjustMadeArray.length > 0){\n           avgMade = adjustMadeArray.reduce((tot, val) => tot + val) / adjustMadeArray.length\n        }\n\n        let avgAttempts = 0.0\n        if (adjustAttemptsArray.length > 0){\n           avgAttempts = adjustAttemptsArray.reduce((tot, val) => tot + val) / adjustAttemptsArray.length\n        }\n\n        if (avgAttempts > 0){\n          return parseFloat((avgMade * 100 / avgAttempts).toFixed(1))\n        } else {\n          return 0.0\n        }\n      } else {\n        return 0.0\n      }\n    default:\n      if (playerGames.length > 0) {\n        let sumArray = []\n        for (const game in playerGames) {\n          if(parseInt(playerGames[game].mins) > 0) {\n            sumArray.push(parseFloat(playerGames[game][stat]))\n          }\n        }\n        let adjustArray = []\n        {\n          sumArray.length - gP >= 0\n            ? adjustArray = [...sumArray.slice(sumArray.length - gP)]\n            : adjustArray = [...sumArray]\n        }\n        let average = 0.0 \n        if (adjustArray.length > 0){\n          average = parseFloat((adjustArray.reduce((tot, val) => tot + val) / gP).toFixed(1))\n        } else {\n          average = 0.0\n        }\n        return average\n      } else {\n        return 0.0\n      }\n  }\n}\n\nfunction gamesPlayed(playerGames){\n  let gamesPlayed = []\n  for (const game in playerGames) {\n    if(parseInt(playerGames[game].mins) > 0) {\n      gamesPlayed.push(1)\n    }\n  }\n  return gamesPlayed.length\n}",["110","111"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js",[],["112","113"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js",[],["114","115"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js",["116"],"export default function WelcomePageContainer() {\n  return (\n    <div className=\"welcome\">\n      <img src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fa.espncdn.com%2Fcombiner%2Fi%3Fimg%3D%252Fphoto%252F2017%252F0525%252Fr212664_1296x729_16-9.jpg&f=1&nofb=1\"/>\n    </div>\n  )\n}",["117","118"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js",["119","120"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["121","122","123","124"],"import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AutoComplete } from 'primereact/autocomplete';\nimport { Button } from 'primereact/button'\nimport computeTradeScore from '../StatFunctions/computeTradeScore'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { combineValues } from '../StatFunctions/combineValues';\n\nfunction TradeAnalyzerSelector() {\n//STATE\n  const allPlayers = useSelector((state) => state.playerAverages)\n  const categories = useSelector((state) => state.categories)\n\n  const [teamAPlayers, setTeamAPlayers] = useState(null)\n  const [teamBPlayers, setTeamBPlayers] = useState(null)\n  const [filteredPlayers, setFilteredPlayers] = useState(null)\n  const [formError, setFormError] = useState(false)\n\n  const searchPlayers = (event) => {\n    setTimeout(() => {\n      let filteredPlayers;\n      if (!event.query.trim().length) {\n        filteredPlayers = [...allPlayers];\n      }\n      else {\n        filteredPlayers = allPlayers.filter((allPlayers) => {\n          return allPlayers.name.toLowerCase().startsWith(event.query.toLowerCase());\n          // return allPlayers.name.toLowerCase().includes(event.query.toLowerCase());\n        });\n      }\n      setFilteredPlayers(filteredPlayers);\n    }, 250);\n  }\n\n  //ELEMENT TEMPLATES\n\n  const itemTemplate = (item) => {\n    return (\n      <div >\n        <div>{item.name}</div>\n      </div>\n    );\n  }\n\n  const formErrorTemplate = () => {\n    return (\n      <div style={{ color: \"red\" }}>Both sides must have players selected.</div>\n    )\n  }\n\n  const clickHandler = () => {\n    if (teamAPlayers && teamBPlayers) {\n      if (!categories) {\n        categories = {\n          fNba_points: true,\n          fNba_assists: true,\n          fNba_tot_reb: true,\n          fNba_blocks: true,\n          fNba_steals: true,\n          fNba_fgp: true,\n          fNba_ftp: true,\n          fNba_tpm: true,\n          // fNba_turnovers: turnovers\n        }\n      }\n      const fantasyValues = computeFantasyValue(allPlayers, categories)\n      const combinedValues = combineValues(allPlayers, fantasyValues)\n      const tradeScore = computeTradeScore(teamAPlayers, teamBPlayers, categories)\n      setFormError(false)\n    } else {\n      setFormError(true)\n    }\n    return null\n  }\n\n  //RENDER\n  return (\n    <>\n      <div className=\"card\">\n        <div style={{ display: \"block\", margin: \"10px\" }}>\n          <span className=\"p-fluid\">\n            <h5>Your Player/s</h5>\n            <AutoComplete value={teamAPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamAPlayers(e.value)} />\n            <h5>Opponent's Player/s</h5>\n            <AutoComplete value={teamBPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamBPlayers(e.value)} />\n          </span>\n          {formError ? formErrorTemplate() : null}\n        </div>\n        <Button onClick={clickHandler} label=\"Compare Trade\" className=\"p-button-raised\" style={{ margin: \"10px\" }} />\n      </div>\n    </>\n  )\n\n}\n\n\nexport default TradeAnalyzerSelector","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",["125","126","127","128","129"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js",[],{"ruleId":"130","severity":1,"message":"131","line":23,"column":5,"nodeType":"132","endLine":23,"endColumn":17,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":54,"column":9,"nodeType":"136","messageId":"137","endLine":58,"endColumn":10},{"ruleId":"134","severity":1,"message":"135","line":61,"column":9,"nodeType":"136","messageId":"137","endLine":65,"endColumn":10},{"ruleId":"134","severity":1,"message":"135","line":95,"column":9,"nodeType":"136","messageId":"137","endLine":99,"endColumn":10},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"138","replacedBy":"142"},{"ruleId":"140","replacedBy":"143"},{"ruleId":"138","replacedBy":"144"},{"ruleId":"140","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":4,"column":7,"nodeType":"148","endLine":4,"endColumn":186},{"ruleId":"138","replacedBy":"149"},{"ruleId":"140","replacedBy":"150"},{"ruleId":"151","severity":2,"message":"152","line":41,"column":3,"nodeType":"153","messageId":"154","endLine":41,"endColumn":22},{"ruleId":"155","severity":2,"message":"156","line":41,"column":3,"nodeType":"157","messageId":"158","endLine":41,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":1,"column":27,"nodeType":"157","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"163","line":54,"column":9,"nodeType":"157","messageId":"164","endLine":54,"endColumn":19},{"ruleId":"159","severity":1,"message":"165","line":67,"column":13,"nodeType":"157","messageId":"161","endLine":67,"endColumn":27},{"ruleId":"159","severity":1,"message":"166","line":68,"column":13,"nodeType":"157","messageId":"161","endLine":68,"endColumn":23},{"ruleId":"159","severity":1,"message":"167","line":20,"column":9,"nodeType":"157","messageId":"161","endLine":20,"endColumn":19},{"ruleId":"159","severity":1,"message":"168","line":21,"column":9,"nodeType":"157","messageId":"161","endLine":21,"endColumn":19},{"ruleId":"159","severity":1,"message":"169","line":27,"column":7,"nodeType":"157","messageId":"161","endLine":27,"endColumn":9},{"ruleId":"159","severity":1,"message":"170","line":30,"column":9,"nodeType":"157","messageId":"161","endLine":30,"endColumn":12},{"ruleId":"159","severity":1,"message":"171","line":31,"column":16,"nodeType":"157","messageId":"161","endLine":31,"endColumn":24},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.","ArrayExpression",["172"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["173"],"no-negated-in-lhs",["174"],["173"],["174"],["173"],["174"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["173"],["174"],"no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-undef","'dispatchSetCategory' is not defined.","Identifier","undef","no-unused-vars","'useEffect' is defined but never used.","unusedVar","no-const-assign","'categories' is constant.","const","'combinedValues' is assigned a value but never used.","'tradeScore' is assigned a value but never used.","'teamAScore' is assigned a value but never used.","'teamBScore' is assigned a value but never used.","'ia' is assigned a value but never used.","'sum' is assigned a value but never used.","'category' is assigned a value but never used.",{"desc":"175","fix":"176"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [categories, playerAverages]",{"range":"177","text":"178"},[893,905],"[categories, playerAverages]"]