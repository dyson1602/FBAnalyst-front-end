[{"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js":"1","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js":"2","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js":"4","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js":"6","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"7","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js":"8","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"9","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js":"10","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js":"11","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js":"12","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js":"13","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js":"14","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js":"16","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"17","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js":"18","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js":"20","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js":"21","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"22","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"23","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js":"24","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js":"25"},{"size":1321,"mtime":1612398597023,"results":"26","hashOfConfig":"27"},{"size":4485,"mtime":1611715827916,"results":"28","hashOfConfig":"27"},{"size":2831,"mtime":1611535380894,"results":"29","hashOfConfig":"27"},{"size":1133,"mtime":1611441537450,"results":"30","hashOfConfig":"27"},{"size":518,"mtime":1612400896970,"results":"31","hashOfConfig":"27"},{"size":1766,"mtime":1611607217713,"results":"32","hashOfConfig":"27"},{"size":1682,"mtime":1611189061225,"results":"33","hashOfConfig":"27"},{"size":3994,"mtime":1611189061225,"results":"34","hashOfConfig":"27"},{"size":1402,"mtime":1612400535459,"results":"35","hashOfConfig":"27"},{"size":888,"mtime":1610578751202,"results":"36","hashOfConfig":"27"},{"size":1163,"mtime":1611768780006,"results":"37","hashOfConfig":"27"},{"size":200,"mtime":1611535380892,"results":"38","hashOfConfig":"27"},{"size":362,"mtime":1610231744011,"results":"39","hashOfConfig":"27"},{"size":547,"mtime":1611535380892,"results":"40","hashOfConfig":"27"},{"size":446,"mtime":1612400603434,"results":"41","hashOfConfig":"27"},{"size":166,"mtime":1611270122438,"results":"42","hashOfConfig":"27"},{"size":263,"mtime":1611722667677,"results":"43","hashOfConfig":"27"},{"size":4567,"mtime":1612399923062,"results":"44","hashOfConfig":"27"},{"size":2508,"mtime":1611338668005,"results":"45","hashOfConfig":"27"},{"size":2796,"mtime":1612132037461,"results":"46","hashOfConfig":"27"},{"size":1659,"mtime":1611535380892,"results":"47","hashOfConfig":"27"},{"size":3301,"mtime":1612400246883,"results":"48","hashOfConfig":"27"},{"size":1028,"mtime":1611535380894,"results":"49","hashOfConfig":"27"},{"size":8943,"mtime":1612400712588,"results":"50","hashOfConfig":"27"},{"size":1235,"mtime":1611535380893,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"h0gt8",{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/Header.js",["108"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/playerRankerChart.js",["109","110","111"],"import React, { useState, useEffect } from 'react'\nimport { connect, useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Button } from 'primereact/button'\nimport { combineValues } from '../StatFunctions/combineValues'\nimport styled from 'styled-components'\n\nfunction PlayerRankerChart() {\n\n  const categories = useSelector((state) => state.categories)\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [combinedValues, setCombinedValues] = useState()\n\n  useEffect(() => {\n    if (categories) {\n      const fantasyValues = computeFantasyValue(playerAverages, categories)\n      const combinedValues = combineValues(playerAverages, fantasyValues)\n\n      const sortedCombinedValues = combinedValues.sort((a,b) => a.fNba_score - b.fNba_score )\n\n      // debugger\n      setCombinedValues(combinedValues)\n    }\n  }, [categories])\n\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\n\n  return (\n    <>\n      <div>\n        <div className=\"card\">\n          <DataTable value={combinedValues} className=\"p-datatable\" paginator\n            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10, 20, 50]}\n            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" sortable></Column>\n            <Column className=\"table-props\" style={{width: \"75px\"}} field=\"name\" header=\"Name\" sortable></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" sortable></Column>\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" sortable></Column>\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" sortable></Column>              \n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" sortable></Column>\n          </DataTable>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues) => dispatch(setFantasyValues(fantasyValues))\n  }\n}\n\n// export default connect(msp, mdp)(PlayerRankerChart)\nexport default connect(null, mdp)(PlayerRankerChart)\n\nconst ColoredColumn = styled(Column)`\n  background-color: \"green\"\n`\n\n// background: {${field > 0 ? \"green\" : field < 0 ? \"pink\" : \"white\"}}",["112","113"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/App.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeAverage.js",["114","115","116"],"\n\nexport function computeAverage(player, gamesParameter = player.player_games.length) {\n  let playerGames = player.player_games\n  let gP = gamesParameter\n\n  let playerAverages = {\n    name: player.name,\n    nba_team_id: player.nba_team_id,\n    position: player.position,\n    avg_mins: avgCaddy(playerGames, \"mins\", gP),\n    avg_fgm: avgCaddy(playerGames, \"fgm\", gP),\n    avg_fga: avgCaddy(playerGames, \"fga\", gP),\n    fgp: avgCaddy(playerGames, \"fgp\", gP),\n    avg_ftm: avgCaddy(playerGames, \"ftm\", gP),\n    avg_fta: avgCaddy(playerGames, \"fta\", gP),\n    ftp: avgCaddy(playerGames, \"ftp\", gP),\n    avg_tpm: avgCaddy(playerGames, \"tpm\", gP),\n    avg_tpa: avgCaddy(playerGames, \"tpa\", gP),\n    tpp: avgCaddy(playerGames, \"tpp\", gP),\n    avg_off_reb: avgCaddy(playerGames, \"off_reb\", gP),\n    avg_def_reb: avgCaddy(playerGames, \"def_reb\", gP),\n    avg_tot_reb: avgCaddy(playerGames, \"tot_reb\", gP),\n    avg_assists: avgCaddy(playerGames, \"assists\", gP),\n    avg_steals: avgCaddy(playerGames, \"steals\", gP),\n    avg_blocks: avgCaddy(playerGames, \"blocks\", gP),\n    avg_turnovers: avgCaddy(playerGames, \"turnovers\", gP),\n    avg_plus_minus: avgCaddy(playerGames, \"plus_minus\", gP),\n    avg_p_fouls: avgCaddy(playerGames, \"p_fouls\", gP),\n    avg_points: avgCaddy(playerGames, \"points\", gP),\n    games_played: gamesPlayed(playerGames)\n  }\n  return playerAverages\n}\n\nfunction avgCaddy(playerGames, stat, gP) {\n  switch (stat) {\n    case \"fgp\" || \"ftp\" || \"tpp\":\n      if (playerGames.length > 0) {\n        let madeArray = []\n        let attemptsArray = []\n        let cat = stat.slice(0, 2)\n\n        for (const game in playerGames) {\n          if (parseInt(playerGames[game].mins) > 0) {\n            madeArray.push(parseFloat(playerGames[game][`${cat}m`]))\n            attemptsArray.push(parseFloat(playerGames[game][`${cat}a`]))\n          }\n        }\n\n        // adjust array conditionals to safeguard against User attempting to view more games\n        // than the player has played; no negative slice\n        let adjustMadeArray = []\n        {\n          madeArray.length - gP >= 0\n            ? adjustMadeArray = [...madeArray.slice(madeArray.length - gP)]\n            : adjustMadeArray = [...madeArray]\n        }\n\n        let adjustAttemptsArray = []\n        {\n          attemptsArray.length - gP >= 0\n            ? adjustAttemptsArray = attemptsArray.slice(attemptsArray.length - gP)\n            : adjustAttemptsArray = [...attemptsArray]\n        }\n\n        // conditionals guard against dividing by zero\n        let avgMade = 0.0\n        if (adjustMadeArray.length > 0){\n           avgMade = adjustMadeArray.reduce((tot, val) => tot + val) / adjustMadeArray.length\n        }\n\n        let avgAttempts = 0.0\n        if (adjustAttemptsArray.length > 0){\n           avgAttempts = adjustAttemptsArray.reduce((tot, val) => tot + val) / adjustAttemptsArray.length\n        }\n\n        if (avgAttempts > 0){\n          return parseFloat((avgMade * 100 / avgAttempts).toFixed(1))\n        } else {\n          return 0.0\n        }\n      } else {\n        return 0.0\n      }\n    default:\n      if (playerGames.length > 0) {\n        let sumArray = []\n        for (const game in playerGames) {\n          if(parseInt(playerGames[game].mins) > 0) {\n            sumArray.push(parseFloat(playerGames[game][stat]))\n          }\n        }\n        let adjustArray = []\n        {\n          sumArray.length - gP >= 0\n            ? adjustArray = [...sumArray.slice(sumArray.length - gP)]\n            : adjustArray = [...sumArray]\n        }\n        let average = 0.0 \n        if (adjustArray.length > 0){\n          average = parseFloat((adjustArray.reduce((tot, val) => tot + val) / gP).toFixed(1))\n        } else {\n          average = 0.0\n        }\n        return average\n      } else {\n        return 0.0\n      }\n  }\n}\n\nfunction gamesPlayed(playerGames){\n  let gamesPlayed = []\n  for (const game in playerGames) {\n    if(parseInt(playerGames[game].mins) > 0) {\n      gamesPlayed.push(1)\n    }\n  }\n  return gamesPlayed.length\n}","/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",["117"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/index.js",[],["118","119"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actionTypes.js",[],["120","121"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/reportWebVitals.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/WelcomePageContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/loading.js",[],["122","123"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/similarPlayerChart.js",["124"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/CategorySelector.js",["125","126"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/categorySelector.js",["127","128"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["129","130"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",[],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/Components/tradeResultChart.js",["131"],"/Users/chrisclark/Flatiron/code/mod5/NBAnalyst-front-end/src/StatFunctions/combineValues.js",[],{"ruleId":"132","severity":1,"message":"133","line":13,"column":15,"nodeType":"134","endLine":13,"endColumn":38},{"ruleId":"135","severity":1,"message":"136","line":23,"column":13,"nodeType":"137","messageId":"138","endLine":23,"endColumn":33},{"ruleId":"139","severity":1,"message":"140","line":28,"column":6,"nodeType":"141","endLine":28,"endColumn":18,"suggestions":"142"},{"ruleId":"135","severity":1,"message":"143","line":81,"column":7,"nodeType":"137","messageId":"138","endLine":81,"endColumn":20},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":54,"column":9,"nodeType":"150","messageId":"151","endLine":58,"endColumn":10},{"ruleId":"148","severity":1,"message":"149","line":61,"column":9,"nodeType":"150","messageId":"151","endLine":65,"endColumn":10},{"ruleId":"148","severity":1,"message":"149","line":95,"column":9,"nodeType":"150","messageId":"151","endLine":99,"endColumn":10},{"ruleId":"139","severity":1,"message":"152","line":19,"column":6,"nodeType":"141","endLine":19,"endColumn":34,"suggestions":"153"},{"ruleId":"144","replacedBy":"154"},{"ruleId":"146","replacedBy":"155"},{"ruleId":"144","replacedBy":"156"},{"ruleId":"146","replacedBy":"157"},{"ruleId":"144","replacedBy":"158"},{"ruleId":"146","replacedBy":"159"},{"ruleId":"135","severity":1,"message":"160","line":1,"column":27,"nodeType":"137","messageId":"138","endLine":1,"endColumn":36},{"ruleId":"161","severity":2,"message":"162","line":41,"column":3,"nodeType":"163","messageId":"164","endLine":41,"endColumn":22},{"ruleId":"165","severity":2,"message":"166","line":41,"column":3,"nodeType":"137","messageId":"167","endLine":41,"endColumn":22},{"ruleId":"135","severity":1,"message":"168","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":16},{"ruleId":"139","severity":1,"message":"152","line":34,"column":6,"nodeType":"141","endLine":34,"endColumn":21,"suggestions":"169"},{"ruleId":"139","severity":1,"message":"170","line":18,"column":6,"nodeType":"141","endLine":18,"endColumn":21,"suggestions":"171"},{"ruleId":"139","severity":1,"message":"172","line":22,"column":6,"nodeType":"141","endLine":22,"endColumn":8,"suggestions":"173"},{"ruleId":"139","severity":1,"message":"174","line":38,"column":6,"nodeType":"141","endLine":38,"endColumn":19,"suggestions":"175"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'sortedCombinedValues' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.","ArrayExpression",["176"],"'ColoredColumn' is assigned a value but never used.","no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["179"],["177"],["178"],["177"],["178"],["177"],["178"],"'useEffect' is defined but never used.","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","no-undef","'dispatchSetCategory' is not defined.","undef","'Button' is defined but never used.",["180"],"React Hook useEffect has a missing dependency: 'allPlayers'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'allPlayers' and 'fantasyValues'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has missing dependencies: 'finalScore' and 'theirPlayers'. Either include them or remove the dependency array.",["183"],{"desc":"184","fix":"185"},"no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [categories, playerAverages]",{"range":"195","text":"196"},"Update the dependencies array to be: [playerAverages, categories, props]",{"range":"197","text":"198"},"Update the dependencies array to be: [categoriesObj, props]",{"range":"199","text":"200"},"Update the dependencies array to be: [allPlayers, fantasyValues]",{"range":"201","text":"202"},{"range":"203","text":"202"},"Update the dependencies array to be: [finalScore, theirPlayers, yourPlayers]",{"range":"204","text":"205"},[1049,1061],"[categories, playerAverages]",[803,831],"[playerAverages, categories, props]",[1054,1069],"[categoriesObj, props]",[753,768],"[allPlayers, fantasyValues]",[860,862],[1121,1134],"[finalScore, theirPlayers, yourPlayers]"]