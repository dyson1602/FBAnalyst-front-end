[{"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/App.js":"1","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actionTypes.js":"2","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"4","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/MainContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actions.js":"6","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/index.js":"7","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/footer.js":"8","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/Header.js":"9","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/loading.js":"10","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/reportWebVitals.js":"11","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/rootReducer.js":"12","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"13","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"14","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"16","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeAverage.js":"17","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"18","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/categorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/playerRankerChart.js":"20","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeResultChart.js":"21","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/combineValues.js":"22","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"23","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/SimilarPlayerRadarGraph.js":"24"},{"size":1133,"mtime":1615663129074,"results":"25","hashOfConfig":"26"},{"size":200,"mtime":1611535380892,"results":"27","hashOfConfig":"26"},{"size":2659,"mtime":1617489996225,"results":"28","hashOfConfig":"26"},{"size":1269,"mtime":1617489996226,"results":"29","hashOfConfig":"26"},{"size":1766,"mtime":1617489996219,"results":"30","hashOfConfig":"26"},{"size":547,"mtime":1611535380892,"results":"31","hashOfConfig":"26"},{"size":888,"mtime":1610578751202,"results":"32","hashOfConfig":"26"},{"size":1163,"mtime":1617489996214,"results":"33","hashOfConfig":"26"},{"size":1325,"mtime":1617489996212,"results":"34","hashOfConfig":"26"},{"size":166,"mtime":1611270122438,"results":"35","hashOfConfig":"26"},{"size":362,"mtime":1610231744011,"results":"36","hashOfConfig":"26"},{"size":1659,"mtime":1611535380892,"results":"37","hashOfConfig":"26"},{"size":588,"mtime":1617592343007,"results":"38","hashOfConfig":"26"},{"size":444,"mtime":1617593229123,"results":"39","hashOfConfig":"26"},{"size":1507,"mtime":1617592562111,"results":"40","hashOfConfig":"26"},{"size":233,"mtime":1617592491241,"results":"41","hashOfConfig":"26"},{"size":3746,"mtime":1617490803567,"results":"42","hashOfConfig":"26"},{"size":3307,"mtime":1617489996217,"results":"43","hashOfConfig":"26"},{"size":2753,"mtime":1617489996213,"results":"44","hashOfConfig":"26"},{"size":4512,"mtime":1617489996215,"results":"45","hashOfConfig":"26"},{"size":8943,"mtime":1617489996219,"results":"46","hashOfConfig":"26"},{"size":295,"mtime":1617489996223,"results":"47","hashOfConfig":"26"},{"size":1682,"mtime":1617220555116,"results":"48","hashOfConfig":"26"},{"size":4577,"mtime":1617592487166,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"qqmcox",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/App.js",[],["107","108"],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actionTypes.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/index.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/Header.js",["109"],"import { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport finalLogo from '../images/FBAnalystLogo.png'\n\nfunction Header() {\n\n  return (\n    <div className=\"navbar-fixed\" >\n      <nav className=\"hf-background\" >\n        <div className=\"nav-wrapper container\">\n          <NavLink to=\"/FBAnalyst\" class=\" right waves-effect waves-light\">\n            <div>\n              <img src={finalLogo} />\n            </div>\n          </NavLink>\n          <ul className=\"left hide-on-med-and-down\">\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/playerRanker\">\n                <LinkText >Player Ranker</LinkText>\n              </NavLink>\n            </li>\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/tradeAnalyzer\">\n                <LinkText >Trade Analyzer</LinkText>\n              </NavLink>\n            </li>\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/similarPlayers\">\n                <LinkText >Similar Players</LinkText>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nconst LinkText = styled.div`\n  font-family: Verdana, Geneva, sans-serif;\n  font-size: 24px;\n  font-weight: 700;\n`\n\nexport default Header","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/loading.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/reportWebVitals.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/WelcomePageContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",["110"],"import TradeAnalyzerSelector from '../Components/tradeAnalyzerSelector'\nimport TradeResultChart from '../Components/tradeResultChart'\nimport CategorySelector from '../Components/categorySelector'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst TradeAnalyzerContainer = (props) => {\n\n  const playerAverages = useSelector((state) => state.playerAverages)\n  const categories = useSelector((state) => state.categories)\n\n  useEffect(() => {\n    const fantasyValues = computeFantasyValue(playerAverages, categories)\n    props.dispatchSetFantasyValue(fantasyValues)\n  }, [playerAverages, categories])\n\n  return (\n    <div className=\"my-container\">\n      <TradeAnalyzerStyledDiv >\n        <CategorySelector />\n      </TradeAnalyzerStyledDiv>\n      <TradeAnalyzerStyledDiv>\n        <TradeAnalyzerSelector />\n      </TradeAnalyzerStyledDiv>\n      <TradeAnalyzerStyledDiv>\n        <div>\n          <TradeResultChart />\n        </div>\n      </TradeAnalyzerStyledDiv>\n    </div>\n  )\n}\n\nconst TradeAnalyzerStyledDiv = styled.div`\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues => dispatch(setFantasyValues(fantasyValues)))\n  }\n}\n\nexport default connect(null, mdp)(TradeAnalyzerContainer)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeAverage.js",["111"],"//Computes player seasonal averages for each statistic. Games parament is built\n//in for future filtering function that hasn't been implemented yet.\n\nexport function computeAverage(player, gamesParameter = 0) {\n  const playerGames = player.player_games\n  const gP = gamesParameter\n\n  const playerAverages = {\n    name: player.name,\n    nba_team_id: player.nba_team_id,\n    position: player.position,\n    avg_mins: avgCaddy(playerGames, \"mins\", gP),\n    avg_fgm: avgCaddy(playerGames, \"fgm\", gP),\n    avg_fga: avgCaddy(playerGames, \"fga\", gP),\n    fgp: avgCaddy(playerGames, \"fgp\", gP),\n    avg_ftm: avgCaddy(playerGames, \"ftm\", gP),\n    avg_fta: avgCaddy(playerGames, \"fta\", gP),\n    ftp: avgCaddy(playerGames, \"ftp\", gP),\n    avg_tpm: avgCaddy(playerGames, \"tpm\", gP),\n    avg_tpa: avgCaddy(playerGames, \"tpa\", gP),\n    tpp: avgCaddy(playerGames, \"tpp\", gP),\n    avg_off_reb: avgCaddy(playerGames, \"off_reb\", gP),\n    avg_def_reb: avgCaddy(playerGames, \"def_reb\", gP),\n    avg_tot_reb: avgCaddy(playerGames, \"tot_reb\", gP),\n    avg_assists: avgCaddy(playerGames, \"assists\", gP),\n    avg_steals: avgCaddy(playerGames, \"steals\", gP),\n    avg_blocks: avgCaddy(playerGames, \"blocks\", gP),\n    avg_turnovers: avgCaddy(playerGames, \"turnovers\", gP),\n    avg_plus_minus: avgCaddy(playerGames, \"plus_minus\", gP),\n    avg_p_fouls: avgCaddy(playerGames, \"p_fouls\", gP),\n    avg_points: avgCaddy(playerGames, \"points\", gP),\n    games_played: gamesPlayed(playerGames)\n  }\n  return playerAverages\n}\n\nfunction avgCaddy(playerGames, statCategory, gP) {\n  if (playerGames.length > 0) {\n    switch (statCategory) {\n      case \"fgp\" || \"ftp\" || \"tpp\":\n        const shotType = statCategory.slice(0, 2)\n        const shotsMadeArray = aggregateStatsInArray(playerGames, `${shotType}m`)\n        const shotAttemptsArray = aggregateStatsInArray(playerGames, `${shotType}a`)\n        const adjustedShotsMadeArray = adjustStatsByGp(shotsMadeArray, gP)\n        const adjustedShotAttemptsArray = adjustStatsByGp(shotAttemptsArray, gP)\n        const averageShotsMade = averageStatCalculator(adjustedShotsMadeArray)\n        const averageShotAttempts = averageStatCalculator(adjustedShotAttemptsArray)\n        return averageShotAttempts > 0\n          ? parseFloat((averageShotsMade * 100 / averageShotAttempts).toFixed(1))\n          : 0.0\n      default:\n        const aggregateOfStatCategory = aggregateStatsInArray(playerGames, statCategory)\n        const adjustedAggregateOfStatCategory = adjustStatsByGp(aggregateOfStatCategory, gP)\n        return parseFloat(averageStatCalculator(adjustedAggregateOfStatCategory).toFixed(1))\n    }\n  } else {\n    return 0.0\n  }\n}\n\n//Builds array of each games stats based on the statCategory, and only counts\n//if the player played that game\nfunction aggregateStatsInArray(playerGames, statCategory) {\n  return playerGames\n    .filter(game => parseInt(game.mins) > 0)\n    .map(game => parseFloat(game[statCategory]))\n}\n\n//Calculates stat average. Conditional guards against division by zero.\nfunction averageStatCalculator(statArray) {\n  if (!statArray.length) return 0.0\n  return statArray.reduce((sum, val) => sum + val) / statArray.length\n}\n\n//Adjusts stats array to account for only most recent games based on gP modifier.\nfunction adjustStatsByGp(statsArray, gP) {\n  let adjustedStatsArray\n  if (gP !== 0) {\n    statsArray.length - gP >= 0\n      ? adjustedStatsArray = [...statsArray.slice(statsArray.length - gP)]\n      : adjustedStatsArray = [...statsArray]\n  } else {\n    adjustedStatsArray = [...statsArray]\n  }\n  return adjustedStatsArray\n}\n\n//Returns total number of games player has played.\nfunction gamesPlayed(playerGames) {\n  return playerGames.reduce((count, game) => {\n    if (parseInt(game.mins) > 0) count += 1\n  }, 0)\n}","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["112","113"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, connect } from 'react-redux'\nimport { AutoComplete } from 'primereact/autocomplete';\nimport { Button } from 'primereact/button'\nimport computeTradeScore from '../StatFunctions/computeTradeScore'\nimport { combineValues } from '../StatFunctions/combineValues';\nimport { setTradeScore } from '../Redux/actions';\nimport styled from 'styled-components'\n\nconst TradeAnalyzerSelector = (props) => {\n \n  const allPlayers = useSelector((state) => state.playerAverages)\n  const categories = useSelector((state) => state.categories)\n  const fantasyValues = useSelector((state) => state.fantasyValues)\n\n  useEffect(() => {\n    setCombinedValues(combineValues(allPlayers, fantasyValues))\n  }, [fantasyValues])\n\n  useEffect(() => {\n    setCombinedValues(combineValues(allPlayers, fantasyValues))\n  }, [])\n\n  const [teamAPlayers, setTeamAPlayers] = useState()\n  const [teamBPlayers, setTeamBPlayers] = useState()\n  const [filteredPlayers, setFilteredPlayers] = useState(null)\n  const [formError, setFormError] = useState(false)\n  const [combinedValues, setCombinedValues] = useState(combineValues(allPlayers, fantasyValues))\n\n  const searchPlayers = (event) => {\n    setTimeout(() => {\n      let filteredPlayers;\n      if (!event.query.trim().length) {\n        filteredPlayers = [...combinedValues];\n      }\n      else {\n        filteredPlayers = combinedValues.filter((allPlayers) => {\n          return allPlayers.name.toLowerCase().startsWith(event.query.toLowerCase());\n          // return allPlayers.name.toLowerCase().includes(event.query.toLowerCase());\n        });\n      }\n      setFilteredPlayers(filteredPlayers);\n    }, 250);\n  }\n\n  const itemTemplate = (item) => {\n    return (\n      <div >\n        <div>{item.name}</div>\n      </div>\n    );\n  }\n\n  const formErrorTemplate = () => {\n    return (\n      <div style={{ color: \"red\" }}>Both sides must have players selected.</div>\n    )\n  }\n\n  const compareTradeHandler = () => {\n    if (teamAPlayers && teamBPlayers) {\n      const tradeScore = computeTradeScore(teamAPlayers, teamBPlayers, categories)\n      props.dispatchSetTradeScores(tradeScore)\n      setFormError(false)\n    } else {\n      setFormError(true)\n    }\n    return null\n  }\n\n  return (\n    <>\n      <Wrapper className=\"card\">\n          <span className=\"p-fluid\">\n            <h5>Your Player/s</h5>\n            <AutoComplete value={teamAPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamAPlayers(e.value)} />\n            <h5>Their Player/s</h5>\n            <AutoComplete value={teamBPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamBPlayers(e.value)} />\n          </span>\n          {formError ? formErrorTemplate() : null}\n        <Button onClick={compareTradeHandler} label=\"Compare Trade\" className=\"p-button-raised\" style={{ margin: \"10px\" }} />\n      </Wrapper>\n    </>\n  )\n}\n\nconst Wrapper = styled.div`\n  width: 50%;\n  padding: 10px;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetTradeScores: tradeScore => dispatch(setTradeScore(tradeScore))\n  }\n}\n\nexport default connect(null, mdp)(TradeAnalyzerSelector)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/categorySelector.js",["114"],"import { useEffect, useState } from 'react'\nimport { ToggleButton } from 'primereact/togglebutton'\nimport { connect } from 'react-redux'\nimport { setCategories } from '../Redux/actions';\nimport styled from 'styled-components'\n\nconst CategorySelector = (props) => {\n\n  const [points, setPoints] = useState(true);\n  const [assists, setAssists] = useState(true);\n  const [rebounds, setRebounds] = useState(true);\n  const [blocks, setBlocks] = useState(true);\n  const [steals, setSteals] = useState(true);\n  const [fgp, setFgp] = useState(true);\n  const [ftp, setFtp] = useState(true);\n  const [tpoint, setTpoint] = useState(true);\n  // const [turnovers, setTurnovers] = useState(false);\n\n  const categoriesObj = {\n    fNba_points: points,\n    fNba_assists: assists,\n    fNba_tot_reb: rebounds,\n    fNba_blocks: blocks,\n    fNba_steals: steals,\n    fNba_fgp: fgp,\n    fNba_ftp: ftp,\n    fNba_tpm: tpoint,\n    // fNba_turnovers: turnovers\n  }\n\n  useEffect(() => {\n    props.dispatchSetCategories(categoriesObj)\n  }, [categoriesObj])\n\n  return (\n    <>\n      <Card className=\"card\">\n        <div className=\"selector-div\">\n          <span className=\"category-span\">Select Catergories: </span>\n          <Toggler checked={points} onChange={(e) => setPoints(e.value)} onLabel=\"Pts\" offLabel=\"Pts\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={assists} onChange={(e) => setAssists(e.value)} onLabel=\"Ast\" offLabel=\"Ast\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={rebounds} onChange={(e) => setRebounds(e.value)} onLabel=\"Reb\" offLabel=\"Reb\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={blocks} onChange={(e) => setBlocks(e.value)} onLabel=\"Blk\" offLabel=\"Blk\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={steals} onChange={(e) => setSteals(e.value)} onLabel=\"Stl\" offLabel=\"Stl\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={fgp} onChange={(e) => setFgp(e.value)} onLabel=\"FG%\" offLabel=\"FG%\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={ftp} onChange={(e) => setFtp(e.value)} onLabel=\"FT%\" offLabel=\"FT%\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={tpoint} onChange={(e) => setTpoint(e.value)} onLabel=\"3Pt\" offLabel=\"3Pt\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n        </div>\n      </Card>\n    </>\n  )\n}\n\nconst Card = styled.div`\n  width: 60%;\n  position: relative;\n  margin: 30px; \n`\n\nconst Toggler = styled(ToggleButton)`\n  width: 75px;\n  margin: 5px;\n  margin-top: 15px;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetCategories: (categories => dispatch(setCategories(categories)))\n  }\n}\n\nexport default connect(null, mdp)(CategorySelector)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/playerRankerChart.js",["115","116","117"],"import React, { useState, useEffect } from 'react'\nimport { connect, useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Button } from 'primereact/button'\nimport { combineValues } from '../StatFunctions/combineValues'\nimport styled from 'styled-components'\n\nfunction PlayerRankerChart() {\n\n  const categories = useSelector((state) => state.categories)\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [combinedValues, setCombinedValues] = useState()\n\n  useEffect(() => {\n    if (categories) {\n      const fantasyValues = computeFantasyValue(playerAverages, categories)\n      const combinedValues = combineValues(playerAverages, fantasyValues)\n      \n      const sortedCombinedValues = combinedValues.sort((a,b) => a.fNba_score - b.fNba_score )\n\n      setCombinedValues(combinedValues)\n    }\n  }, [categories])\n\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\n\n  return (\n    <>\n      <div>\n        <div className=\"card\">\n          <DataTable value={combinedValues} className=\"p-datatable\" paginator sortField=\"fNba_score\" sortOrder={-1}\n            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10, 20, 50]}\n            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" sortable ></Column>\n            <Column className=\"table-props\" style={{width: \"75px\"}} field=\"name\" header=\"Name\" sortable></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" sortable></Column>\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" sortable></Column>\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" sortable></Column>              \n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" sortable></Column>\n          </DataTable>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues) => dispatch(setFantasyValues(fantasyValues))\n  }\n}\n\n// export default connect(msp, mdp)(PlayerRankerChart)\nexport default connect(null, mdp)(PlayerRankerChart)\n\nconst ColoredColumn = styled(Column)`\n  background-color: \"green\"\n`\n\n// background: {${field > 0 ? \"green\" : field < 0 ? \"pink\" : \"white\"}}","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeResultChart.js",["118"],"import React, { useEffect, useState } from 'react'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { useSelector } from 'react-redux'\n\nfunction TradeResultChart() {\n\n  const tradeScore = useSelector((state) => state.tradeScore)\n  const categories = useSelector((state) => state.categories)\n\n  const [yourPlayers, setYourPlayers] = useState()\n  const [theirPlayers, setTheirPlayers] = useState()\n  const [finalScore, setFinalScore] = useState(null)\n\n\n  useEffect(() => {\n    if (tradeScore) {\n      setYourPlayers(tradeScoreToDataTable(tradeScore[0]))\n      setTheirPlayers(tradeScoreToDataTable(tradeScore[1]))\n      // setFinalScore(finalScoreFunction(yourPlayers,theirPlayers))\n    }\n  }, [tradeScore])\n\n  useEffect(() => {\n\n  }, [categories])\n\n  useEffect(() => {\n    if (yourPlayers && theirPlayers) {\n      console.log(\"in useEffect to set final Score\", finalScore)\n\n      let localFS = [finalScoreFunction(yourPlayers, theirPlayers)]\n      console.log(\"localFS: \", localFS)\n\n      setFinalScore(localFS)\n      console.log(\"final score; \", finalScore)\n    }\n  }, [yourPlayers])\n\n\n  return (\n    <>\n      {/* {finalScore\n        ? <> */}\n      <h4>Your Players</h4>\n      <DataTable value={yourPlayers} className=\"p-datatable-striped\">\n        <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n        <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n        {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n        <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n        <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n        <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n        <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n        <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n        <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n        <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n      </DataTable>\n      <h4>Their Players</h4>\n      <DataTable value={theirPlayers} className=\"p-datatable-striped\">\n        <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n        <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n        {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n        <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n        <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n        <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n        <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n        <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n        <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n        <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n      </DataTable>\n\n      <div>\n        <h4>Difference</h4>\n        <DataTable value={finalScore} className=\"p-datatable-striped\">\n          <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n          <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n          {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n          <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n          <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n          <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n          <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n          <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n          <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n          <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n          <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n          {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n          <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n        </DataTable>\n        {/* {!finalScore\n          ? null\n          : finalScore.fNba_score > 0\n            ? <span style={{color: \"darkgreen\"}}>You win this trade!</span>\n            : <span style={{color: \"red\"}}>This is a poor trade for you</span>} */}\n      </div>\n    </>\n    //     : null}\n    // </>\n  )\n}\n\nfunction tradeScoreToDataTable(tradeScore) {\n  let adjustedForTable = []\n\n  let totalsRow = tradeScore[1]\n  totalsRow.name = \"TOTALS\"\n\n  adjustedForTable = [...tradeScore[0], totalsRow]\n  return adjustedForTable\n}\n\nfunction finalScoreFunction(yourPlayers, theirPlayers) {\n  let fs = {}\n  const holdYourPlayers = [...yourPlayers]\n  let categories = holdYourPlayers.pop()\n  const holdTheirPlayers = [...theirPlayers]\n  const theirStats = holdTheirPlayers.pop()\n\n  for (const category in categories) {\n    if (category !== \"name\") {\n      if (categories[category] > theirStats[category]) {\n        fs[category] = -parseFloat((categories[category] - theirStats[category]).toFixed(2))\n      } else if (categories[category] < theirStats[category]) {\n        fs[category] = parseFloat(Math.abs(categories[category] - theirStats[category]).toFixed(2))\n      } else {\n        fs[category] = 0.0\n      }\n    }\n  }\n  fs.name = \"FINAL SCORE\"\n  return fs\n}\n\nexport default TradeResultChart","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/combineValues.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/SimilarPlayerRadarGraph.js",["119"],"import React, { useState, useEffect } from 'react'\nimport { Chart } from 'primereact/chart'\nimport { useSelector } from 'react-redux'\nimport { AutoComplete } from 'primereact/autocomplete'\nimport styled from 'styled-components'\n\n\nconst SimilarPlayerRadarGraph = () => {\n\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [firstPlayer, setFirstPlayer] = useState()\n  const [secondPlayer, setSecondPlayer] = useState()\n  const [filteredPlayers, setFilteredPlayers] = useState()\n\n  const searchPlayers = (event) => {\n    setTimeout(() => {\n      let filteredPlayers;\n      if (!event.query.trim().length) {\n        filteredPlayers = [...playerAverages];\n      }\n      else {\n        filteredPlayers = playerAverages.filter((allPlayers) => {\n          return allPlayers.name.toLowerCase().includes(event.query.toLowerCase());\n        });\n      }\n      setFilteredPlayers(filteredPlayers);\n    }, 250);\n    console.log(firstPlayer, secondPlayer)\n  }\n\n  const itemTemplate = (item) => {\n    return (\n      <div >\n        <div>{item.name}</div>\n      </div>\n    );\n  }\n\n  let chartAxes = {\n    labels: ['Points', 'Rebounds', 'Assists', '3-Point', 'Blocks', 'Steals', 'FG %', \"FT %\"]\n  }\n\n  function testChart() {\n    let chartData;\n    if (firstPlayer && secondPlayer) {\n      chartData = {\n        labels: ['Points', 'Rebounds', 'Assists', '3-Point', 'Blocks', 'Steals', 'FG %', \"FT %\"],\n        datasets: [\n          {\n            label: firstPlayer.name,\n            backgroundColor: 'rgba(179,181,198,0.2)',\n            borderColor: 'rgba(179,181,198,1)',\n            pointBackgroundColor: 'rgba(179,181,198,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(179,181,198,1)',\n            data: [\n              firstPlayer.avg_points * .33,\n              firstPlayer.avg_tot_reb,\n              firstPlayer.avg_assists * 1.5,\n              firstPlayer.avg_tpm * 3,\n              firstPlayer.avg_blocks * 5,\n              firstPlayer.avg_steals * 5,\n              firstPlayer.fgp * .15,\n              firstPlayer.ftp * .15,\n            ]\n          },\n          {\n            label: secondPlayer.name,\n            backgroundColor: 'rgba(255,99,132,0.2)',\n            borderColor: 'rgba(255,99,132,1)',\n            pointBackgroundColor: 'rgba(255,99,132,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(255,99,132,1)',\n            data: [\n              secondPlayer.avg_points * .33,\n              secondPlayer.avg_tot_reb,\n              secondPlayer.avg_assists * 1.5,\n              secondPlayer.avg_tpm * 3,\n              secondPlayer.avg_blocks * 4,\n              secondPlayer.avg_steals * 4,\n              secondPlayer.fgp * .15,\n              secondPlayer.ftp * .15,\n            ]\n          }\n        ]\n      };\n      return chartData\n    }\n  }\n\n  const lightOptions = {\n    legend: {\n      labels: {\n        fontColor: '#495057'\n      }\n    },\n    scale: {\n      pointLabels: {\n        fontColor: '#495057'\n      },\n      gridLines: {\n        color: '#ebedef'\n      },\n      ticks: {\n        suggestedMin: 0,\n        suggestedMax: 15,\n        display: false\n      }\n    }\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <Card className=\"card\">\n            <span className=\"p-fluid\">\n              <h5>First Player</h5>\n              <AutoComplete\n                value={firstPlayer}\n                suggestions={filteredPlayers}\n                completeMethod={searchPlayers}\n                field=\"name\" dropdown\n                itemTemplate={itemTemplate}\n                onChange={(e) => setFirstPlayer(e.value)} />\n              <h5>Second Player</h5>\n              <AutoComplete\n                value={secondPlayer}\n                suggestions={filteredPlayers}\n                completeMethod={searchPlayers}\n                field=\"name\" dropdown\n                itemTemplate={itemTemplate}\n                onChange={(e) => setSecondPlayer(e.value)} />\n            </span>\n        </Card>\n      </Wrapper>\n      <br />\n      <div className=\"card\">\n        {firstPlayer && secondPlayer ?\n          <Chart type=\"radar\" data={testChart()} options={lightOptions} />\n          : <Chart type=\"radar\" data={chartAxes} options={lightOptions} />\n        }\n      </div>\n    </>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n`\nconst Card = styled.div`\n  margin: 10px;\n  width: 50%;\n  padding: 10px;\n`\n\nexport default SimilarPlayerRadarGraph",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":13,"column":15,"nodeType":"126","endLine":13,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":19,"column":6,"nodeType":"129","endLine":19,"endColumn":34,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":90,"column":43,"nodeType":"133","messageId":"134","endLine":90,"endColumn":45},{"ruleId":"127","severity":1,"message":"135","line":18,"column":6,"nodeType":"129","endLine":18,"endColumn":21,"suggestions":"136"},{"ruleId":"127","severity":1,"message":"137","line":22,"column":6,"nodeType":"129","endLine":22,"endColumn":8,"suggestions":"138"},{"ruleId":"127","severity":1,"message":"128","line":33,"column":6,"nodeType":"129","endLine":33,"endColumn":21,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":23,"column":13,"nodeType":"142","messageId":"143","endLine":23,"endColumn":33},{"ruleId":"127","severity":1,"message":"144","line":27,"column":6,"nodeType":"129","endLine":27,"endColumn":18,"suggestions":"145"},{"ruleId":"140","severity":1,"message":"146","line":80,"column":7,"nodeType":"142","messageId":"143","endLine":80,"endColumn":20},{"ruleId":"127","severity":1,"message":"147","line":38,"column":6,"nodeType":"129","endLine":38,"endColumn":19,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"149","line":1,"column":27,"nodeType":"142","messageId":"143","endLine":1,"endColumn":36},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["152"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'allPlayers'. Either include it or remove the dependency array.",["153"],"React Hook useEffect has missing dependencies: 'allPlayers' and 'fantasyValues'. Either include them or remove the dependency array.",["154"],["155"],"no-unused-vars","'sortedCombinedValues' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.",["156"],"'ColoredColumn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finalScore' and 'theirPlayers'. Either include them or remove the dependency array.",["157"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [playerAverages, categories, props]",{"range":"169","text":"170"},"Update the dependencies array to be: [allPlayers, fantasyValues]",{"range":"171","text":"172"},{"range":"173","text":"172"},"Update the dependencies array to be: [categoriesObj, props]",{"range":"174","text":"175"},"Update the dependencies array to be: [categories, playerAverages]",{"range":"176","text":"177"},"Update the dependencies array to be: [finalScore, theirPlayers, yourPlayers]",{"range":"178","text":"179"},[803,831],"[playerAverages, categories, props]",[753,768],"[allPlayers, fantasyValues]",[860,862],[1011,1026],"[categoriesObj, props]",[1037,1049],"[categories, playerAverages]",[1121,1134],"[finalScore, theirPlayers, yourPlayers]"]