[{"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/App.js":"1","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actionTypes.js":"2","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js":"3","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeTradeScore.js":"4","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/MainContainer.js":"5","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actions.js":"6","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/index.js":"7","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/footer.js":"8","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/Header.js":"9","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/loading.js":"10","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/reportWebVitals.js":"11","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/rootReducer.js":"12","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/PlayerRankerContainer.js":"13","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/WelcomePageContainer.js":"14","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js":"15","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js":"16","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeAverage.js":"17","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js":"18","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/categorySelector.js":"19","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/playerRankerChart.js":"20","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeResultChart.js":"21","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/similarPlayerChart.js":"22","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/combineValues.js":"23","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js":"24"},{"size":1133,"mtime":1615663129074,"results":"25","hashOfConfig":"26"},{"size":200,"mtime":1611535380892,"results":"27","hashOfConfig":"26"},{"size":2659,"mtime":1617210899569,"results":"28","hashOfConfig":"26"},{"size":1028,"mtime":1611535380894,"results":"29","hashOfConfig":"26"},{"size":1766,"mtime":1617154104358,"results":"30","hashOfConfig":"26"},{"size":547,"mtime":1611535380892,"results":"31","hashOfConfig":"26"},{"size":888,"mtime":1610578751202,"results":"32","hashOfConfig":"26"},{"size":1163,"mtime":1611768780006,"results":"33","hashOfConfig":"26"},{"size":1325,"mtime":1617154104356,"results":"34","hashOfConfig":"26"},{"size":166,"mtime":1611270122438,"results":"35","hashOfConfig":"26"},{"size":362,"mtime":1610231744011,"results":"36","hashOfConfig":"26"},{"size":1659,"mtime":1611535380892,"results":"37","hashOfConfig":"26"},{"size":518,"mtime":1617138637693,"results":"38","hashOfConfig":"26"},{"size":446,"mtime":1612400980221,"results":"39","hashOfConfig":"26"},{"size":1402,"mtime":1612400980220,"results":"40","hashOfConfig":"26"},{"size":218,"mtime":1612224089008,"results":"41","hashOfConfig":"26"},{"size":7749,"mtime":1617215099513,"results":"42","hashOfConfig":"26"},{"size":3301,"mtime":1617138637692,"results":"43","hashOfConfig":"26"},{"size":2753,"mtime":1612224089007,"results":"44","hashOfConfig":"26"},{"size":4512,"mtime":1617154104357,"results":"45","hashOfConfig":"26"},{"size":8943,"mtime":1612400980220,"results":"46","hashOfConfig":"26"},{"size":4567,"mtime":1612400980219,"results":"47","hashOfConfig":"26"},{"size":295,"mtime":1617154104359,"results":"48","hashOfConfig":"26"},{"size":1682,"mtime":1611189061225,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"qqmcox",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/App.js",[],["106","107"],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actionTypes.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeFantasyValue.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeTradeScore.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/MainContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/actions.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/index.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/footer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/Header.js",["108"],"import { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport finalLogo from '../images/FBAnalystLogo.png'\n\nfunction Header() {\n\n  return (\n    <div className=\"navbar-fixed\" >\n      <nav className=\"hf-background\" >\n        <div className=\"nav-wrapper container\">\n          <NavLink to=\"/FBAnalyst\" class=\" right waves-effect waves-light\">\n            <div>\n              <img src={finalLogo} />\n            </div>\n          </NavLink>\n          <ul className=\"left hide-on-med-and-down\">\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/playerRanker\">\n                <LinkText >Player Ranker</LinkText>\n              </NavLink>\n            </li>\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/tradeAnalyzer\">\n                <LinkText >Trade Analyzer</LinkText>\n              </NavLink>\n            </li>\n            <li className=\"waves-effect waves-light\">\n              <NavLink to=\"/FBAnalyst/similarPlayers\">\n                <LinkText >Similar Players</LinkText>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nconst LinkText = styled.div`\n  font-family: Verdana, Geneva, sans-serif;\n  font-size: 24px;\n  font-weight: 700;\n`\n\nexport default Header","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/loading.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/reportWebVitals.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Redux/rootReducer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/PlayerRankerContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/WelcomePageContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/TradeAnalyzerContainer.js",["109"],"import TradeAnalyzerSelector from '../Components/tradeAnalyzerSelector'\nimport TradeResultChart from '../Components/tradeResultChart'\nimport CategorySelector from '../Components/categorySelector'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst TradeAnalyzerContainer = (props) => {\n\n  const playerAverages = useSelector((state) => state.playerAverages)\n  const categories = useSelector((state) => state.categories)\n\n  useEffect(() => {\n    const fantasyValues = computeFantasyValue(playerAverages, categories)\n    props.dispatchSetFantasyValue(fantasyValues)\n  }, [playerAverages, categories])\n\n  return (\n    <div className=\"my-container\">\n      <Element >\n        <CategorySelector />\n      </Element>\n      <Element>\n        <TradeAnalyzerSelector />\n      </Element>\n      <Element>\n        <div>\n          <TradeResultChart />\n        </div>\n      </Element>\n    </div>\n  )\n}\n\nconst Element = styled.div`\n  margin: 10px;\n  display: flex;\n  justify-content: center;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues => dispatch(setFantasyValues(fantasyValues)))\n  }\n}\n\nexport default connect(null, mdp)(TradeAnalyzerContainer)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Containers/SimilarPlayersContainer.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeAverage.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeAnalyzerSelector.js",["110","111"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, connect } from 'react-redux'\nimport { AutoComplete } from 'primereact/autocomplete';\nimport { Button } from 'primereact/button'\nimport computeTradeScore from '../StatFunctions/computeTradeScore'\nimport { combineValues } from '../StatFunctions/combineValues';\nimport { setTradeScore } from '../Redux/actions';\nimport styled from 'styled-components'\n\nconst TradeAnalyzerSelector = (props) => {\n \n  const allPlayers = useSelector((state) => state.playerAverages)\n  const categories = useSelector((state) => state.categories)\n  const fantasyValues = useSelector((state) => state.fantasyValues)\n\n  useEffect(() => {\n    setCombinedValues(combineValues(allPlayers, fantasyValues))\n  }, [fantasyValues])\n\n  useEffect(() => {\n    setCombinedValues(combineValues(allPlayers, fantasyValues))\n  }, [])\n\n  const [teamAPlayers, setTeamAPlayers] = useState(null)\n  const [teamBPlayers, setTeamBPlayers] = useState(null)\n  const [filteredPlayers, setFilteredPlayers] = useState(null)\n  const [formError, setFormError] = useState(false)\n  const [combinedValues, setCombinedValues] = useState(combineValues(allPlayers, fantasyValues))\n\n  const searchPlayers = (event) => {\n    setTimeout(() => {\n      let filteredPlayers;\n      if (!event.query.trim().length) {\n        filteredPlayers = [...combinedValues];\n      }\n      else {\n        filteredPlayers = combinedValues.filter((allPlayers) => {\n          return allPlayers.name.toLowerCase().startsWith(event.query.toLowerCase());\n          // return allPlayers.name.toLowerCase().includes(event.query.toLowerCase());\n        });\n      }\n      setFilteredPlayers(filteredPlayers);\n    }, 250);\n  }\n\n  const itemTemplate = (item) => {\n    return (\n      <div >\n        <div>{item.name}</div>\n      </div>\n    );\n  }\n\n  const formErrorTemplate = () => {\n    return (\n      <div style={{ color: \"red\" }}>Both sides must have players selected.</div>\n    )\n  }\n\n  const clickHandler = () => {\n    if (teamAPlayers && teamBPlayers) {\n      const tradeScore = computeTradeScore(teamAPlayers, teamBPlayers, categories)\n      props.dispatchSetTradeScores(tradeScore)\n      setFormError(false)\n    } else {\n      setFormError(true)\n    }\n    return null\n  }\n\n  return (\n    <>\n      <Wrapper className=\"card\">\n          <span className=\"p-fluid\">\n            <h5>Your Player/s</h5>\n            <AutoComplete value={teamAPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamAPlayers(e.value)} />\n            <h5>Their Player/s</h5>\n            <AutoComplete value={teamBPlayers} suggestions={filteredPlayers} completeMethod={searchPlayers} field=\"name\" multiple dropdown itemTemplate={itemTemplate} onChange={(e) => setTeamBPlayers(e.value)} />\n          </span>\n          {formError ? formErrorTemplate() : null}\n        <Button onClick={clickHandler} label=\"Compare Trade\" className=\"p-button-raised\" style={{ margin: \"10px\" }} />\n      </Wrapper>\n    </>\n  )\n}\n\nconst Wrapper = styled.div`\n  width: 50%;\n  padding: 10px;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetTradeScores: tradeScore => dispatch(setTradeScore(tradeScore))\n  }\n}\n\nexport default connect(null, mdp)(TradeAnalyzerSelector)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/categorySelector.js",["112"],"import { useEffect, useState } from 'react'\nimport { ToggleButton } from 'primereact/togglebutton'\nimport { connect } from 'react-redux'\nimport { setCategories } from '../Redux/actions';\nimport styled from 'styled-components'\n\nconst CategorySelector = (props) => {\n\n  const [points, setPoints] = useState(true);\n  const [assists, setAssists] = useState(true);\n  const [rebounds, setRebounds] = useState(true);\n  const [blocks, setBlocks] = useState(true);\n  const [steals, setSteals] = useState(true);\n  const [fgp, setFgp] = useState(true);\n  const [ftp, setFtp] = useState(true);\n  const [tpoint, setTpoint] = useState(true);\n  // const [turnovers, setTurnovers] = useState(false);\n\n  const categoriesObj = {\n    fNba_points: points,\n    fNba_assists: assists,\n    fNba_tot_reb: rebounds,\n    fNba_blocks: blocks,\n    fNba_steals: steals,\n    fNba_fgp: fgp,\n    fNba_ftp: ftp,\n    fNba_tpm: tpoint,\n    // fNba_turnovers: turnovers\n  }\n\n  useEffect(() => {\n    props.dispatchSetCategories(categoriesObj)\n  }, [categoriesObj])\n\n  return (\n    <>\n      <Card className=\"card\">\n        <div className=\"selector-div\">\n          <span className=\"category-span\">Select Catergories: </span>\n          <Toggler checked={points} onChange={(e) => setPoints(e.value)} onLabel=\"Pts\" offLabel=\"Pts\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={assists} onChange={(e) => setAssists(e.value)} onLabel=\"Ast\" offLabel=\"Ast\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={rebounds} onChange={(e) => setRebounds(e.value)} onLabel=\"Reb\" offLabel=\"Reb\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={blocks} onChange={(e) => setBlocks(e.value)} onLabel=\"Blk\" offLabel=\"Blk\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={steals} onChange={(e) => setSteals(e.value)} onLabel=\"Stl\" offLabel=\"Stl\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={fgp} onChange={(e) => setFgp(e.value)} onLabel=\"FG%\" offLabel=\"FG%\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={ftp} onChange={(e) => setFtp(e.value)} onLabel=\"FT%\" offLabel=\"FT%\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n          <Toggler checked={tpoint} onChange={(e) => setTpoint(e.value)} onLabel=\"3Pt\" offLabel=\"3Pt\" onIcon=\"pi pi-check\" offIcon=\"pi pi-times\" />\n        </div>\n      </Card>\n    </>\n  )\n}\n\nconst Card = styled.div`\n  width: 60%;\n  position: relative;\n  margin: 30px; \n`\n\nconst Toggler = styled(ToggleButton)`\n  width: 75px;\n  margin: 5px;\n  margin-top: 15px;\n`\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetCategories: (categories => dispatch(setCategories(categories)))\n  }\n}\n\nexport default connect(null, mdp)(CategorySelector)","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/playerRankerChart.js",["113","114","115"],"import React, { useState, useEffect } from 'react'\nimport { connect, useSelector } from 'react-redux'\nimport { setFantasyValues } from '../Redux/actions'\nimport { computeFantasyValue } from '../StatFunctions/computeFantasyValue'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Button } from 'primereact/button'\nimport { combineValues } from '../StatFunctions/combineValues'\nimport styled from 'styled-components'\n\nfunction PlayerRankerChart() {\n\n  const categories = useSelector((state) => state.categories)\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [combinedValues, setCombinedValues] = useState()\n\n  useEffect(() => {\n    if (categories) {\n      const fantasyValues = computeFantasyValue(playerAverages, categories)\n      const combinedValues = combineValues(playerAverages, fantasyValues)\n      \n      const sortedCombinedValues = combinedValues.sort((a,b) => a.fNba_score - b.fNba_score )\n\n      setCombinedValues(combinedValues)\n    }\n  }, [categories])\n\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\n\n  return (\n    <>\n      <div>\n        <div className=\"card\">\n          <DataTable value={combinedValues} className=\"p-datatable\" paginator sortField=\"fNba_score\" sortOrder={-1}\n            paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n            currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10, 20, 50]}\n            paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\n            <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" sortable ></Column>\n            <Column className=\"table-props\" style={{width: \"75px\"}} field=\"name\" header=\"Name\" sortable></Column>\n            <Column className=\"table-props\" field=\"position\" header=\"Pos\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" sortable></Column>\n            <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" sortable></Column>\n            <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" sortable></Column>\n            <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" sortable></Column>              \n            <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" sortable></Column>\n            <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" sortable></Column>\n          </DataTable>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction mdp(dispatch) {\n  return {\n    dispatchSetFantasyValue: (fantasyValues) => dispatch(setFantasyValues(fantasyValues))\n  }\n}\n\n// export default connect(msp, mdp)(PlayerRankerChart)\nexport default connect(null, mdp)(PlayerRankerChart)\n\nconst ColoredColumn = styled(Column)`\n  background-color: \"green\"\n`\n\n// background: {${field > 0 ? \"green\" : field < 0 ? \"pink\" : \"white\"}}","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/tradeResultChart.js",["116"],"import React, { useEffect, useState } from 'react'\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { useSelector } from 'react-redux'\n\nfunction TradeResultChart() {\n\n  const tradeScore = useSelector((state) => state.tradeScore)\n  const categories = useSelector((state) => state.categories)\n\n  const [yourPlayers, setYourPlayers] = useState()\n  const [theirPlayers, setTheirPlayers] = useState()\n  const [finalScore, setFinalScore] = useState(null)\n\n\n  useEffect(() => {\n    if (tradeScore) {\n      setYourPlayers(tradeScoreToDataTable(tradeScore[0]))\n      setTheirPlayers(tradeScoreToDataTable(tradeScore[1]))\n      // setFinalScore(finalScoreFunction(yourPlayers,theirPlayers))\n    }\n  }, [tradeScore])\n\n  useEffect(() => {\n\n  }, [categories])\n\n  useEffect(() => {\n    if (yourPlayers && theirPlayers) {\n      console.log(\"in useEffect to set final Score\", finalScore)\n\n      let localFS = [finalScoreFunction(yourPlayers, theirPlayers)]\n      console.log(\"localFS: \", localFS)\n\n      setFinalScore(localFS)\n      console.log(\"final score; \", finalScore)\n    }\n  }, [yourPlayers])\n\n\n  return (\n    <>\n      {/* {finalScore\n        ? <> */}\n      <h4>Your Players</h4>\n      <DataTable value={yourPlayers} className=\"p-datatable-striped\">\n        <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n        <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n        {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n        <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n        <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n        <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n        <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n        <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n        <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n        <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n      </DataTable>\n      <h4>Their Players</h4>\n      <DataTable value={theirPlayers} className=\"p-datatable-striped\">\n        <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n        <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n        {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n        <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n        <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n        <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n        <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n        <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n        <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n        <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n        <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n        {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n        <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n      </DataTable>\n\n      <div>\n        <h4>Difference</h4>\n        <DataTable value={finalScore} className=\"p-datatable-striped\">\n          <Column className=\"table-props\" field=\"name\" header=\"Name\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_score\" header=\"fNba\" ></Column>\n          <Column className=\"table-props\" field=\"position\" header=\"Pos\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_mins\" header=\"Mins\" ></Column> */}\n          {/* <Column className=\"table-props\" field=\"avg_fga\" header=\"FgA\" ></Column> */}\n          <Column className=\"table-props\" field=\"fgp\" header=\"Fg%\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_fta\" header=\"FtA\" ></Column> */}\n          <Column className=\"table-props\" field=\"ftp\" header=\"Ft%\" ></Column>\n          <Column className=\"table-props\" field=\"avg_tpm\" header=\"TPM\" ></Column>\n          <Column className=\"table-props\" field=\"avg_tot_reb\" header=\"Reb\" ></Column>\n          <Column className=\"table-props\" field=\"avg_assists\" header=\"Ast\" ></Column>\n          <Column className=\"table-props\" field=\"avg_steals\" header=\"Stl\" ></Column>\n          <Column className=\"table-props\" field=\"avg_blocks\" header=\"Blk\" ></Column>\n          {/* <Column className=\"table-props\" field=\"avg_turnovers\" header=\"TO\" ></Column> */}\n          <Column className=\"table-props\" field=\"avg_points\" header=\"Pts\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_ftp\" header=\"fFt%\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_fgp\" header=\"fFg%\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_tpm\" header=\"fTPM\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_assists\" header=\"fAst\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_tot_reb\" header=\"fReb\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_steals\" header=\"fStl\" ></Column>\n          <Column className=\"table-props\" field=\"fNba_blocks\" header=\"fBlk\" ></Column>\n          {/* <Column className=\"table-props\" field=\"fNba_turnovers\" header=\"fTO\" ></Column> */}\n          <Column className=\"table-props\" field=\"fNba_points\" header=\"fPts\" ></Column>\n        </DataTable>\n        {/* {!finalScore\n          ? null\n          : finalScore.fNba_score > 0\n            ? <span style={{color: \"darkgreen\"}}>You win this trade!</span>\n            : <span style={{color: \"red\"}}>This is a poor trade for you</span>} */}\n      </div>\n    </>\n    //     : null}\n    // </>\n  )\n}\n\nfunction tradeScoreToDataTable(tradeScore) {\n  let adjustedForTable = []\n\n  let totalsRow = tradeScore[1]\n  totalsRow.name = \"TOTALS\"\n\n  adjustedForTable = [...tradeScore[0], totalsRow]\n  return adjustedForTable\n}\n\nfunction finalScoreFunction(yourPlayers, theirPlayers) {\n  let fs = {}\n  const holdYourPlayers = [...yourPlayers]\n  let categories = holdYourPlayers.pop()\n  const holdTheirPlayers = [...theirPlayers]\n  const theirStats = holdTheirPlayers.pop()\n\n  for (const category in categories) {\n    if (category !== \"name\") {\n      if (categories[category] > theirStats[category]) {\n        fs[category] = -parseFloat((categories[category] - theirStats[category]).toFixed(2))\n      } else if (categories[category] < theirStats[category]) {\n        fs[category] = parseFloat(Math.abs(categories[category] - theirStats[category]).toFixed(2))\n      } else {\n        fs[category] = 0.0\n      }\n    }\n  }\n  fs.name = \"FINAL SCORE\"\n  return fs\n}\n\nexport default TradeResultChart","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/Components/similarPlayerChart.js",["117"],"import React, { useState, useEffect } from 'react'\nimport { Chart } from 'primereact/chart'\nimport { useSelector } from 'react-redux'\nimport { AutoComplete } from 'primereact/autocomplete'\nimport styled from 'styled-components'\n\n\nconst SimilarPlayerChart = () => {\n\n  const playerAverages = useSelector((state) => state.playerAverages)\n\n  const [firstPlayer, setFirstPlayer] = useState()\n  const [secondPlayer, setSecondPlayer] = useState()\n  const [filteredPlayers, setFilteredPlayers] = useState()\n\n  const searchPlayers = (event) => {\n    setTimeout(() => {\n      let filteredPlayers;\n      if (!event.query.trim().length) {\n        filteredPlayers = [...playerAverages];\n      }\n      else {\n        filteredPlayers = playerAverages.filter((allPlayers) => {\n          return allPlayers.name.toLowerCase().includes(event.query.toLowerCase());\n        });\n      }\n      setFilteredPlayers(filteredPlayers);\n    }, 250);\n    console.log(firstPlayer, secondPlayer)\n  }\n\n  const itemTemplate = (item) => {\n    return (\n      <div >\n        <div>{item.name}</div>\n      </div>\n    );\n  }\n\n  let chartAxes = {\n    labels: ['Points', 'Rebounds', 'Assists', '3-Point', 'Blocks', 'Steals', 'FG %', \"FT %\"]\n  }\n\n  function testChart() {\n    let chartData;\n    if (firstPlayer && secondPlayer) {\n      chartData = {\n        labels: ['Points', 'Rebounds', 'Assists', '3-Point', 'Blocks', 'Steals', 'FG %', \"FT %\"],\n        datasets: [\n          {\n            label: firstPlayer.name,\n            backgroundColor: 'rgba(179,181,198,0.2)',\n            borderColor: 'rgba(179,181,198,1)',\n            pointBackgroundColor: 'rgba(179,181,198,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(179,181,198,1)',\n            data: [\n              firstPlayer.avg_points * .33,\n              firstPlayer.avg_tot_reb,\n              firstPlayer.avg_assists * 1.5,\n              firstPlayer.avg_tpm * 3,\n              firstPlayer.avg_blocks * 5,\n              firstPlayer.avg_steals * 5,\n              firstPlayer.fgp * .15,\n              firstPlayer.ftp * .15,\n            ]\n          },\n          {\n            label: secondPlayer.name,\n            backgroundColor: 'rgba(255,99,132,0.2)',\n            borderColor: 'rgba(255,99,132,1)',\n            pointBackgroundColor: 'rgba(255,99,132,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(255,99,132,1)',\n            data: [\n              secondPlayer.avg_points * .33,\n              secondPlayer.avg_tot_reb,\n              secondPlayer.avg_assists * 1.5,\n              secondPlayer.avg_tpm * 3,\n              secondPlayer.avg_blocks * 4,\n              secondPlayer.avg_steals * 4,\n              secondPlayer.fgp * .15,\n              secondPlayer.ftp * .15,\n            ]\n          }\n        ]\n      };\n      return chartData\n    }\n  }\n\n  const lightOptions = {\n    legend: {\n      labels: {\n        fontColor: '#495057'\n      }\n    },\n    scale: {\n      pointLabels: {\n        fontColor: '#495057'\n      },\n      gridLines: {\n        color: '#ebedef'\n      },\n      ticks: {\n        suggestedMin: 0,\n        suggestedMax: 15,\n        display: false\n      }\n    }\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <Card className=\"card\">\n            <span className=\"p-fluid\">\n              <h5>First Player</h5>\n              <AutoComplete\n                value={firstPlayer}\n                suggestions={filteredPlayers}\n                completeMethod={searchPlayers}\n                field=\"name\" dropdown\n                itemTemplate={itemTemplate}\n                onChange={(e) => setFirstPlayer(e.value)} />\n              <h5>Second Player</h5>\n              <AutoComplete\n                value={secondPlayer}\n                suggestions={filteredPlayers}\n                completeMethod={searchPlayers}\n                field=\"name\" dropdown\n                itemTemplate={itemTemplate}\n                onChange={(e) => setSecondPlayer(e.value)} />\n            </span>\n        </Card>\n      </Wrapper>\n      <br />\n      <div className=\"card\">\n        {firstPlayer && secondPlayer ?\n          <Chart type=\"radar\" data={testChart()} options={lightOptions} />\n          : <Chart type=\"radar\" data={chartAxes} options={lightOptions} />\n        }\n      </div>\n    </>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n`\nconst Card = styled.div`\n  margin: 10px;\n  width: 50%;\n  padding: 10px;\n`\n\nexport default SimilarPlayerChart","/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/combineValues.js",[],"/Users/chrisclark/Flatiron/code/mod5/FBAnalyst-front-end/src/StatFunctions/computeLeagueAverage.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":13,"column":15,"nodeType":"124","endLine":13,"endColumn":38},{"ruleId":"125","severity":1,"message":"126","line":19,"column":6,"nodeType":"127","endLine":19,"endColumn":34,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":18,"column":6,"nodeType":"127","endLine":18,"endColumn":21,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":22,"column":6,"nodeType":"127","endLine":22,"endColumn":8,"suggestions":"132"},{"ruleId":"125","severity":1,"message":"126","line":33,"column":6,"nodeType":"127","endLine":33,"endColumn":21,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":23,"column":13,"nodeType":"136","messageId":"137","endLine":23,"endColumn":33},{"ruleId":"125","severity":1,"message":"138","line":27,"column":6,"nodeType":"127","endLine":27,"endColumn":18,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":80,"column":7,"nodeType":"136","messageId":"137","endLine":80,"endColumn":20},{"ruleId":"125","severity":1,"message":"141","line":38,"column":6,"nodeType":"127","endLine":38,"endColumn":19,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":1,"column":27,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["146"],"React Hook useEffect has a missing dependency: 'allPlayers'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'allPlayers' and 'fantasyValues'. Either include them or remove the dependency array.",["148"],["149"],"no-unused-vars","'sortedCombinedValues' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'playerAverages'. Either include it or remove the dependency array.",["150"],"'ColoredColumn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finalScore' and 'theirPlayers'. Either include them or remove the dependency array.",["151"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [playerAverages, categories, props]",{"range":"163","text":"164"},"Update the dependencies array to be: [allPlayers, fantasyValues]",{"range":"165","text":"166"},{"range":"167","text":"166"},"Update the dependencies array to be: [categoriesObj, props]",{"range":"168","text":"169"},"Update the dependencies array to be: [categories, playerAverages]",{"range":"170","text":"171"},"Update the dependencies array to be: [finalScore, theirPlayers, yourPlayers]",{"range":"172","text":"173"},[803,831],"[playerAverages, categories, props]",[753,768],"[allPlayers, fantasyValues]",[860,862],[1011,1026],"[categoriesObj, props]",[1037,1049],"[categories, playerAverages]",[1121,1134],"[finalScore, theirPlayers, yourPlayers]"]